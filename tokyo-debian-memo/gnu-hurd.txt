うーん、
http://ftp.debian-ports.org/debian-cd/hurd-i386/current/

にて、
 cd-imageと、
 KVMイメージ
http://ftp.debian-ports.org/debian-cd/hurd-i386/current/debian-hurd.img.tar.gz

※tar.gzのくせに中身は、1ファイルだけ。しかも展開すると、3GBytesもある...
(sparseファイルのようで、実際は
   du -h ./debian-hurd-20130504.img
   でみると、808MBytes
)
が手に入る。さらに、インストール/起動方法などは、
http://ftp.debian-ports.org/debian-cd/hurd-i386/current/YES_REALLY_README.txt
にある。

qemu-system-i386 -sdl -no-kvm-irqchip -drive file=./debian-hurd-20130504.img,cache=writeback

で動くが遅い...

amd64のもとで、
kvm -sdl -no-kvm-irqchip -drive file=./debian-hurd-20130504.img,cache=writeback
で動いた...
qemu-system-x86_64 -enable-kvm -sdl -no-kvm-irqchip -drive file=./debian-hurd-20130504.img,cache=writeback
でやってみた。
--->なんで？（まあ、早いのう）


ID: root
でノーパスワードでログイン可能。

なんかしらんが、ログインすると、gnuのアイコンがグラフィックででる。

shutdown -h nowしてみたが、落ちない...

よーわからんので、ホスト側でctl+Cしてみた。
-->いろいろ壊れた。

sync;sync;halt
にしてみた。まあ、なんか止まった感じ。

しかし、なんかいろいろ動かんかんじ。
uptime/dfなどうごかん。

さすがdebianだけあって、
dpkg -l
などは動く。
xとか入ってる。

rootだけど、startxしてみたら、
なんかXが動いた。

さらによーわからん、window managerが動く...
(Ice WMだそうな）

いろいろAccelarationが効いていないので、Xが遅い...
※ただ、解像度がいくらなのかはわからんが、結構高い?
---> /var/log/X.org.0

笑ったのだが、

 gnu hurdは、SMP未対応なんだそうな。あとmarchカーネルが
遅いのが全体へ問題が波及しているらしい。

 gnu hurdはlinuxでインストーラ動かして、
ネットだとかファイルシステムだとかをlinuxに認識させて
インストールする。結構原始的なインストールが行われるので、
いろいろできそこないなため、grubを手動インストールしなきゃ
いけないなどいろいろ足らん。

取り急ぎ、動かしてからのチュートリアル
http://www.gnu.org/software/hurd/users-guide/using_gnuhurd.html#Who-Should-Use-the-Hurd_003f

まあ、ひととおり使い方が書いてあるので、必読。

man settransは無いというのがなんとも硬派。

ネットワークの基本設定。

settrans -fgcap /servers/socket/2 /hurd/pfinet -i eth0 \
     -a 192.168.0.5 -m 255.255.255.0 -g 192.168.0.1

--->うお、
qemu-system-x86_64 -enable-kvm -sdl -no-kvm-irqchip -drive file=./debian-hurd-20130504.img,cache=writeback
の元では、ネットワークカードがないので、
/hurd/pfinet: file_name_lookup eth0: No such file or directtory
/hurd/pfinet: devince_open(eth0): (os/device) no such device
となる。

使えるハードは以下のとおり

http://www.nongnu.org/thug/gnumach_hardware.html


で結局試行錯誤してみたが、libvirtの設定は次のとおりだ...
-----------------ここから----------------
<domain type='kvm' id='4'>
  <name>gnu-hurd</name>
  <uuid>d193b655-bf36-4c62-8222-badcff4cc0fe</uuid>
  <memory unit='KiB'>524288</memory>
  <currentMemory unit='KiB'>524288</currentMemory>
  <vcpu placement='static'>1</vcpu>
  <os>
    <type arch='x86_64' machine='pc-i440fx-1.6'>hvm</type>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/bin/kvm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='writeback'/>
      <source file='/var/lib/libvirt/images/debian-hurd-20130504.img'/>
      <target dev='hda' bus='ide'/>
      <alias name='ide0-0-0'/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
    </disk>
    <disk type='block' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <target dev='hdc' bus='ide'/>
      <readonly/>
      <alias name='ide0-1-0'/>
      <address type='drive' controller='0' bus='1' target='0' unit='0'/>
    </disk>
    <controller type='usb' index='0'>
      <alias name='usb0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>
    </controller>
    <controller type='pci' index='0' model='pci-root'>
      <alias name='pci.0'/>
    </controller>
    <controller type='ide' index='0'>
      <alias name='ide0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <controller type='sata' index='0'>
      <alias name='sata0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
    </controller>
    <controller type='scsi' index='0'>
      <alias name='scsi0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </controller>
    <interface type='bridge'>
      <mac address='52:54:00:a8:00:05'/>
      <source bridge='br0'/>
      <target dev='vnet0'/>
      <model type='rtl8139'/>
      <alias name='net0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    <serial type='pty'>
      <source path='/dev/pts/2'/>
      <target port='0'/>
      <alias name='serial0'/>
    </serial>
    <console type='pty' tty='/dev/pts/2'>
      <source path='/dev/pts/2'/>
      <target type='serial' port='0'/>
      <alias name='serial0'/>
    </console>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' port='5900' autoport='yes' listen='127.0.0.1'>
      <listen type='address' address='127.0.0.1'/>
    </graphics>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
      <alias name='video0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>
    <memballoon model='virtio'>
      <alias name='balloon0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </memballoon>
  </devices>
  <seclabel type='none'/>
</domain>
-----------------ここから----------------
ちょっとなんか遅い気もするが、こんなもんか？


eth0-ethnは全部/dev/以下にファイルができている。

hurd_20130501みると、e1000とかある...

ps とったら、
 /hurd/pfinet --interface=/dev/eth0 --address=10.0.2.15 --netmask=255.255.255.0 --gateway=10.0.2.2 -6 /servers/socket/26

とかいやがりました。

settranceコマンドはhurdパッケージに存在。

どうも止めるときは、
settrans -fgap /servers/socket/2
で止められるらしい。

で、件のqemuイメージにて、
 net---> e1000
 settrans -fgap /servers/socket/2
 settrans -fgcap /servers/socket/2 /hurd/pfinet -i /dev/eth0 \
     -a 192.168.0.5 -m 255.255.255.0 -g 192.168.0.1

ってやってやると、
ping 192.168.0.1
でpingが帰るぜ。

--> /etc/network/interfaceが有効なので、
---------ここから------------
auto lo
iface lo inet loopback

# The primary network interface
auto /dev/eth0
iface /dev/eth0 inet static
        address 192.168.0.5
        netmask 255.255.255.0
        gateway 192.168.0.1
---------ここまで------------

とやってあげると、そのとおりにeth0が設定される。

どうも、どう設定されたかを見たくば、
ps -auxww | fgrep eth
とかやると、pfinetがその数だけ動いているのでわかる。


serviceコマンド使えた。
例：service ssh restartなど。

/etc/apt/source.listの中身：
deb http://cdn.debian.net/debian/ sid main
deb-src http://cdn.debian.net/debian/ sid main

deb http://ftp.debian-ports.org/debian unreleased main
deb-src http://ftp.debian-ports.org/debian unreleased main

まぢか...こいつsidだ。

わー、aptもaptitudeも入ってやがる...

さあ、aptitude updateしてみた。うお、何ら問題なくupdateできるぜ。
aptitude full-upgradeしてみた。

おおー、aptitude full-upgradeで、gnumach-1.4になるんだー。
※gnu mach 1.4は2013/9リリース

あれ？aptitudeが全部おとし終わって何故かフリーズ...なんじゃらほい。
よくわからんので、killした。
代わりにapt-get upgradeしてみた。

df/free/topとかで、
/procが無いいわれまくるので、ちょっと
http://www.gnu.org/software/hurd/hurd/translator/procfs.html
みてやってみた。

settrans -ca proc procfs --compatible
mount -t proc proc /proc
ls /proc
でいつものprocがみえる。

http://www.gnu.org/software/hurd/hurd/translator/
で、/hurd/以下の説明がみれる。

http://www.gnu.org/software/hurd/hurd/
で、hurdに関するいろいろが読める

初学者は、
http://www.gnu.org/software/hurd/hurd/documentation.html
から読むべき？

ちなみに、終わらせ方は、sync;sync;halt

しまった、x上でhurdパッケージが入れ替わるようなアップデートしちゃいけなかった。
理由：/hurd/が変わるということはデバイスドライバが変わるということです。なので、
　　　あっチュー間にxがおかしくなる...

----
とりあえず、インストールからやってみる。

sudo qemu-img create -f raw /var/lib/libvirt/images/debian-hurd0 7G
sudo virt-install --connect=qemu:///system -n debian-hurd0 --ram 512 --cdrom /home/nojima/prog/hurd-image/debian-hurd-2013-i386-NETINST-1.iso --disk /var/lib/libvirt/images/debian-hurd0,bus=ide,size=7,format=raw,cache=writeback --bridge=br0,model=e1000 --vnc --hvm --accelerate

※qemu-imgしないとファイルがないというエラーに...

で、以前はlinuxでブートしてインストーラが走るらしかったが、
今回はhurdがそのまま走る。

わー、LanguageはEnglishしかないぜ。
countryはother->Asia->Japan
Configure locales --> United States en_US.UTF-8
Configure the keyboard --> American English
NetworkConfigure Manually-->適当に
Set up users and passwords--> rootのパスワード入れる
Partition disks --> "Guided - use entire disk"

しかし、Installing the base systemが遅せーっ。IDEだからか？i386だからか？
(KVMなんだけどな)
とにかくCPUも張り付くぜ。

Configure the package managerでmirror countryをJapanに
ftp.jp.debian.orgにて。

しかしインストール遅いなー。IDEだからか？CPU一個しか使えないからか?
ダウンロードなんて1Mbpsもあれば、はっきりいって誤差だな。
大部分はインストーラの処理...orz
AMD athron 64 x2 5600でもう1時間以上かかる。
popconいれちゃった。

おおー、software selectionが走った。

デフォルトがssh server/standard system utitlities
ということだ。わかってらっしゃる。
だが断る！→Debian desktop environmentいれちゃうもんねー
--->修羅の道に突入...

あれ？Select and install softwareで...failした。

今度は仕方ないので、"Debian desktop environment"をオフってみた。
--->うまくいった。（だめじゃん！）

grub2もインストールがはじまった...

--->とりあえず無事にインストールが終了。

勝手にブート。でも時刻がUTCだ...

おおー、ftp.jp.debian.org/debian/がpoolに。ついでにいうとsidだ。

あれ？cdromからインストールすると、loginのちのgnuのマークがでないのう。

おお、procはちゃんとmountされるらしい。

topは死亡する。

nojima@debian-hurd0:~$ uname -a
GNU debian-hurd0 0.5 GNU-Mach 1.3.99-486/Hurd-0.5 i686-AT386 GNU

だそうな。

なお、grubにてAdvanced options for Debian GNU/Hurd
を押下しないと、mach-1.4は起動しない。

とりいそぎ、mach-1.4を起動したときのuname -a
nojima@debian-hurd0:/boot/grub$ uname -a
GNU debian-hurd0 0.5 GNU-Mach 1.4-486/Hurd-0.5 i686-AT386 GNU

/boot/grub/grub.cfgに起動に必要な事柄が入ってる。

まずは、

 Step 1. machの起動
 Step 2. モジュールといわれる部分の起動

おっと、インストール完了のちのディスク容量は
714MBytes程度だった。
※Xなし

とりあえず、aptitude update/full-upgradeは動いた...
tasksel にて、desktop選ぶと
tasksel: apt-get failed (100)
といわれてこける。

nojima@debian-hurd0:~/prog/debian$ sudo apt-get install task-desktop
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Some packages could not be installed. This may mean that you have
requested an impossible situation or if you are using the unstable
distribution that some required packages have not yet been created
or been moved out of Incoming.
The following information may help to resolve the situation:

The following packages have unmet dependencies:
 task-desktop : Depends: xserver-xorg-video-all but it is not going to be installed
                Recommends: task-gnome-desktop but it is not going to be installed or
                            task-kde-desktop but it is not going to be installed or
                            task-lxde-desktop but it is not going to be installed or
                            task-xfce-desktop but it is not going to be installed
                Recommends: eject but it is not installable
                Recommends: iw but it is not installable
                Recommends: alsa-utils but it is not installable
                Recommends: alsa-base but it is not going to be installed
                Recommends: pm-utils but it is not going to be installed
E: Unable to correct problems, you have held broken packages.

とのことらしい。これが原因か。

だめだ...desktop系はインストールできねー。
sudo aptitude install xserver-xorg-video-allしたら依存関係満たせなくて死亡。

とりあえず、
aptitude install xserver-xorg-video-cirrus
してみたら、うまくインストールがすすんでる...

なんかようわからんが、さらに
aptitude install task-lxde-desktop
するとそれらしいものが入ってくる気がする...
→と思ったらxserver-xorg-video-allが失敗して結局うまくいってないぜ。


もちろん、これだけだと面倒くさすぎるので
aptitude install fluxbox xinit

んで、sudo xinitして、現れたコンソールにて、fluxbox &
とかしてしばらくすると、fluxboxなXが現れる。

インスコしたsparseなrawファイルのkvm用イメージは、gzipで圧縮して持ち込んだ場合
以下のようにして展開するとsparseなまま展開できる。

mkfifo tmp
sudo cp --sparse=always tmp /var/lib/libvirt/images/debian-hurd0
別窓で、
zcat debian-hurd0.gz > tmp
これで、
sparseの最適化はcpが全力でやってくれる。

ぐっは、caps押すと、caps押しっぱなしというモードに突入だ...
virt-viewerのせいなのか？

showtrans /servers/socket/1
とかやると、ネットワーク設定が、
showtrans /dev/tty1
とかやると、端末設定が
どうsettransしたかが出てくる。
※まあ、psとってもいいわけだが...

うおー、一体誰がコンソールを勝手にセットアップしてるんだ?

っていうか、hurdって、マニュアルなさ過ぎ!

ちきしょー、grub2から解析しないとわからんやんけーっ。

うおー、grubって元はgnu hurdのmulti-bootを対応するために
プロトタイプされたboot loaderなのかー。しらんかったぜ。
(info grub 中、1.2章History of GRUBより)
そしたら、FreeBSDにもいいやんけという事になり、そのままGRUB誕生とあいなる。

grub2を勉強せんとなぁぁぁーっ


info grubを読むと、
4.3.1 GNU/Hurd
に基本的なgrub.cfgの例と説明がちっとある。
--->これがそのまま/boot/grub/grub.cfgに書かれている感じ。


grub> multiboot /boot/gnumach.gz root=device:hd0s1
grub> module  /hurd/ext2fs.static ext2fs --readonly \
              --multiboot-command-line='${kernel-command-line}' \
              --host-priv-port='${host-port}' \
              --device-master-port='${device-port}' \
              --exec-server-task='${exec-task}' -T typed '${root}' \
               '$(task-create)' '$(task-resume)'
grub> module /lib/ld.so.1 exec /hurd/exec '$(exec-task=task-create)'

multibootという形式はgrubネイティブのフォーマットだそうな。

$(task-create)とか誰が定めてんだ?


info machということで、machカーネルのinfoファイルが読めるぜ。
結構内容充実してんなー。

GNU machって、info machの
1.2 Features
に記載されている事が本当なのか？
特に眉唾：
it's scalable
     Mach is particularly well suited for SMP and network cluster
     techniques.  Thread support is provided at the kernel level, and
     the kernel itself takes advantage of that.  Network transparency at
     the IPC level makes resources of the system available across
     machine boundaries (with NORMA IPC, currently not available in GNU
     Mach).

あれ？SMP/threadって対応してたんだっけ？

sudo aptitude install build-essential
しないと、ソースパッケージ落としてきてもソースが展開されないぜ。
dpkg-devが入らんので。

info見ると面白いなぁ。configureで組み込むデバドラとか指定するんだ...Hurdって。
SCSI結構充実してんじゃん。

なんと、apt-get source hurdしたら、すごいいっぱいtar.gzが落ちるぜ。なんだこりゃ？
----------------------
$ls
hurd_0.5.git20131101-1.debian.tar.bz2
hurd_0.5.git20131101-1.dsc
hurd_0.5.git20131101.orig-devnode.tar.bz2
hurd_0.5.git20131101.orig-eth-filter.tar.bz2
hurd_0.5.git20131101.orig-eth-multiplexer.tar.bz2
hurd_0.5.git20131101.orig-libbpf.tar.bz2
hurd_0.5.git20131101.orig-libddekit.tar.bz2
hurd_0.5.git20131101.orig-libdde-linux26.tar.bz2
hurd_0.5.git20131101.orig-libhurd-slab.tar.bz2
hurd_0.5.git20131101.orig-libmachdev.tar.bz2
hurd_0.5.git20131101.orig-procfs.tar.bz2
hurd_0.5.git20131101.orig-random.tar.bz2
hurd_0.5.git20131101.orig.tar.bz2
$
----------------------
こんなことできるんだ...しらんかったぜ。

ソースの大きさは全部で60MBytes程度

ngHurd というのがある？
http://www.gnu.org/software/hurd/hurd/ng.html
Debianはどっちの技術だ？

--->見ると、
L4 Pistachioってなんだ？
disってみた↓
http://walfield.org/papers/200707-walfield-critique-of-the-GNU-Hurd.pdf

See. info hurd 2.2 Server Bootstrap
によると、GNU hurdってなんでもサーバーなのね。
/hurd/init-->/hurd/proc,/hurd/auth
          -->/ettc/hurd/runsystem.sh
ついでに、core Hurdはパラレルに起動だって。sub-Hurdsとかもあるのか？

recursive-bootstrapって機能ってすごくないか?？
See. 2.2.1 Recursive Bootstrap (info hurdより）
まあ、chrootとか、lxcとか言われたら話変わってくるが...
parent Hurd -->invoke-->another Hurdを動かせる。抜けるには単にhaltとか/rebootとか。

ぶ、2章でおわりかよ。

4.章は何かのライブラリの説明だ...
4.3読むと、いわゆるシステムコールはsoket越しのRPCによる実装なのか？ひょっとして。
--->あー、もちっと低いレイヤーの話か？
5.でやっとtranslatorの説明だ。
いきなりプログラマ向けの話だ。
--->5.2は簡単なtranslatorの場合のライブラリTrivfsの説明だ。

んー、プログラマ向けの話多いなぁ。
とおもったら、書きかけやんけーっ

trust

tcb
---> http://www.gnu.org/software/hurd/tcb.html

RPCはhurdの重要な部分を占めるが、ここはMIGというフレームワークを使う。
なお、MIG無しのRPCのrawフォーマットは、
http://walfield.org/pub/people/neal/papers/hurd-misc/mach-ipc-without-mig.txt
に記載がある。

translatorの良いポータル↓
http://www.gnu.org/software/hurd/hurd/translator.html

gnumachのrefernceman
http://www.gnu.org/software/hurd/gnumach-doc/

読んでみているが、以下の言葉は決まり文句だなぁ。

it's free software
Anybody can use, modify, and redistribute it under the terms of the GNU General Public License (see Copying). GNU Mach is part of the GNU system, which is a complete operating system licensed under the GPL. 
it's built to survive
As a microkernel, GNU Mach doesn't implement a lot of the features commonly found in an operating system, but only the bare minimum that is required to implement a full operating system on top of it. This means that a lot of the operating system code is maintained outside of GNU Mach, and while this code may go through a complete redesign, the code of the microkernel can remain comparatively stable. 
it's scalable
Mach is particularly well suited for SMP and network cluster techniques. Thread support is provided at the kernel level, and the kernel itself takes advantage of that. Network transparency at the IPC level makes resources of the system available across machine boundaries (with NORMA IPC, currently not available in GNU Mach). 
it exists
The Mach microkernel is real software that works Right Now. It is not a research or a proposal. You don't have to wait at all before you can start using and developing it. Mach has been used in many operating systems in the past, usually as the base for a single UNIX server. In the GNU system, Mach is the base of a functional multi-server operating system, the Hurd.

なんだそうな。

machカーネルコンパイル時に指定するqemuとは、
‘qemu’ will include only the set of device drivers that is useful when using the resulting kernel binary to drive a Hurd system in the QEMU system emulator. This is only useful for reducing the kernel build time and the kernel image size.
ということだそうで。要はコンパイル時間を削りましょーという意味。

げえええ、
http://www.gnu.org/software/hurd/gnumach-doc/Configuration.html#Configuration
みると、むちゃくちゃデバドラつんでんやんけーっ！

すげえ、びっくりだが、gnumach-docみるとわかるが、
基本的なOSの機能は全部IPCベースであらかじめmach側に用意されている。
要はこちらをカスタムしまくるわけだ。

kernel debugger搭載済みで、文法はadbよりちょっと賢いぐらいか？

Hurdの名前の由来：
Hurd stands for Hird of Unix-Replacing Daemons. And, then, Hird stands for Hurd of Interfaces Representing Depth.

なんてこった、Hurdのadvantageって、
1. FUSEが最初から使える！
　settrans -a ftp\: /hurd/hostmux /hurd/ftpfs /
　dpkg -i ftp://ftp.gnu.org/path/to/*.deb
　いやー、只の器用貧乏ってかんじだ。

アイデア募集だHurd↓
http://www.gnu.org/software/hurd/community/weblogs/ArneBab/niches_for_the_hurd.html
まあ、物は言いよう。あとMulti-coreな環境には向いてるのう。

MIGって、
Richard P. Draves, Michael B. Jones, Mary R. Thompson, MIG - THE MACH INTERFACE GENERATOR. ps, doc. November 1989. Department of Computer Science, Carnegie-Mellon University.
の略なんだ。しらんかったぜ。

ソースパッケージとしては、
 
 - hurd
 - gnumach

の２つがあるのう。

----------------hurd0----------------
nojima@debian-hurd0:~$ ps elf 
    USER   PID  PPID TTY     TIME COMMAND
    root     1     1   -  0:00.09 /bin/bash /etc/hurd/runsystem root=device:hd0s1
       -     2     1   -  0:00.04 /hurd/init root=device:hd0s1
       -     3     1   ?  0:00.20 root=device:hd0s1
       -     4     2   ?  0:01.26 /hurd/proc
       -     5     2   -  0:07.01 ext2fs --readonly --multiboot-command-line=root=device:hd
       -     6     5   -  0:00.90 /hurd/exec
       -     7     2   -  0:00.34 /hurd/auth
    root     8     5   -  0:00.37 /hurd/term /dev/console device console
    root     9     5   -  0:00.00 /hurd/magic tty
    root    10     5   -  0:00.29 /hurd/pflocal
    root    13     1   -  0:00.12 /hurd/mach-defpager
    root    15     5   -  0:00.04 /hurd/storeio hd0s5
    root    19     5   -  0:00.07 /hurd/storeio hd0s1
    root    20     5   -  0:00.06 /hurd/storeio hd2
    root    21     5   -  0:00.01 /hurd/storeio fd0
    root    22     5   -  0:00.04 /hurd/storeio fd1
       -    24     5   -  0:00.11 /hurd/null
    root    25     5   -  0:00.04 /hurd/procfs --compatible
       -    26    25   -  0:00.02 /hurd/mtab /
    root    62     5   -  0:00.02 /hurd/streamio kmsg
    root    92     5   -  0:00.02 /hurd/fifo
    root    94     1   -  0:00.04 /usr/sbin/rsyslogd
    root   100     1   -  0:00.01 /usr/sbin/anacron -s
  daemon   104     1   -  0:00.02 /usr/sbin/atd
    root   125     1   -  0:00.00 /usr/sbin/cron
    root   134     5   -  0:00.04 /hurd/random --seed-file /var/spool/random-seed --fast
messagebus 135     1   -  0:00.03 /usr/bin/dbus-daemon --system
    root   378     5   -  0:00.25 /hurd/pfinet --interface=/dev/eth0 --address=192.168.0.6
    root   379     5   -  0:00.04 /hurd/storeio --no-cache time
    root   380     5   -  0:00.04 /hurd/devnode -M /dev/netdde eth0
    root   381     5   -  0:04.73 /hurd/netdde
    root   383     5   -  0:00.02 /hurd/random --seed-file /var/spool/random-seed
Debian-exim 392    1   -  0:00.02 /usr/sbin/exim4 -bd -q30m
    root   404     1   -  0:00.03 /usr/sbin/sshd
    root   409     5   -  0:00.02 /hurd/term /dev/tty1 hurdio /dev/vcs/1/console
    root   410     5   -  0:00.06 /hurd/console
    root   414     1   -  0:00.09 /bin/console --daemonize -d current_vcs -c /dev/vcs -d vg
    root   415     5   -  0:00.01 /hurd/storeio --no-cache mem
    root   423     1   -  0:00.04 /sbin/runttys
       -   424   423  co  0:00.01 /bin/bash -noprofile /bin/loginpr
       -   425   423   1  0:00.01 /bin/bash -noprofile /bin/loginpr
       -   426   423   2  0:00.03 /bin/bash -noprofile /bin/loginpr
       -   427   423   3  0:00.03 /bin/bash -noprofile /bin/loginpr
       -   428   423   4  0:00.01 /bin/bash -noprofile /bin/loginpr
       -   429   423   5  0:00.02 /bin/bash -noprofile /bin/loginpr
       -   430   423   6  0:00.01 /bin/bash -noprofile /bin/loginpr
    root   431     5   -  0:00.03 /hurd/term /dev/tty2 hurdio /dev/vcs/2/console
    root   432     5   -  0:00.02 /hurd/term /dev/tty3 hurdio /dev/vcs/3/console
    root   433     5   -  0:00.03 /hurd/term /dev/tty4 hurdio /dev/vcs/4/console
    root   434     5   -  0:00.03 /hurd/term /dev/tty5 hurdio /dev/vcs/5/console
    root   435     5   -  0:00.02 /hurd/term /dev/tty6 hurdio /dev/vcs/6/console
    root   436     5   -  0:00.01 /hurd/password
    root   437   404   -  0:00.32 /usr/sbin/sshd -R
  nojima   439   437   -  0:00.28 /usr/sbin/sshd -R
    root   440     5   -  0:00.24 /hurd/term /dev/ptyp0 pty-master /dev/ttyp0
  nojima   441   439  p0  0:00.89 -bash
  nojima   531   441  p0  0:00.02 ps -elf
----------------hurd0----------------
という感じ。

つまりは、/bin/bash /etc/hurd/runsystem root=device:hd0s1
が起点。initがいつも１番だと思うなよ！

runsystemのやること
 -シングルユーザか、fastbootか、multiユーザモードか？を判定しそれぞれの処理する。
 -localhost(127.0.0.1)作る。(/hurd/pflocal動かす)
 -/etc/hurd/rc autobootとかする。（マルチユーザの時）
  /etc/hurd/rcのみの時はfastboot

で、
/etc/hurd/rcの冒頭にあるが、
　
 /hurd/mach-defpagerってなんだ？？
--->$(HURD_SRC)/mach-defpager/以下がソースだ。どうも仮想メモリを扱う
　　　デーモンらしい。さすがmicro kernel形式。なんでもユーザランドのDaemon。


うお、
 Step 1. /etc/rc.boot/S*を実行し、
 Step 2. /etc/rc2.d/を決め打ち実行だった。
（一応、/etc/inittabもdefault 2だけどな）

/usr/sbin/login（?gettyとかか？）に相当するのは、/sbin/runttysというプロセスのようだ。

pstree --argumentsするとプロセスの関係わかっていい感じ。

あれ？/sbin/shutdown がある。

dmesgがないので、/dev/klogを見るらしい。
showtrans /dev/klogとかすると、
/hurd/streamio kmsg
なんだそうな。
--->どうもリングバッファっぽくて、catするとメッセージの最後にポインタ
が移動しちゃうぜ。

まあ、基本的にHurdは、/dev/以下のファイル---> 何かのDaemon
に紐づくので、showtrans /dev/〜
をするとプロセス名がわかるかんじ。

/dev/eth0調べると、
nojima@debian-hurd0:/usr/lib/hurd/console$ showtrans /dev/eth0 
/hurd/devnode -M /dev/netdde eth0

だそうな。

trivfsって何かサーバーのパターンらしい。
---> $(SRC_HURD)/libtrivfs/等にtrivfsについては手続きが実装済み。
---> info hurdの5.2 Trivfs Library
　　　に若干のドキュメントあり。

eth0なデバイス作る、denodeみると($(HURD_SRC)/devnode/devnode.c)

うーん、gnumach-1.4/doc/mach.infoとかを持つパッケージがない...
なので、mach.infoが読めん。

argp_parse()はlibcのライブラリ。
---> info libcの25.3.1章参照。

なんてこった、translatorについてのマニュアルが無いぜ。
(info hurdにも説明が無い...)
なので、translatorのソースみてオプションとか見るしかない。

あ、嘘だ。$(SRC_HURD)/<translator名>/READMEに説明がある場合がある。

1. /hurd/devnode

/hurd/devnodeは、
54 static const struct argp_option options[] =
 55 {
 56     {"name", 'n', "DEVICENAME", 0,
 57       "Define the device name used by clients in device_open()", 2},
 58     {"master-device", 'M', "FILE", 0,
 59       "Get a pseudo master device port", 3},
 60     {0}
 61 };

だそうな。/hurd/devnode -M /dev/netdde eth0
みたいな使い方をする。

$(SRC_HURD)/devnode/main.c中

 mach_task_self() --> info mach中7.2章のTask Interfaceに説明あり。

336   task_get_bootstrap_port (mach_task_self (), &bootstrap);
こちらは、Task Special Portsをbootstrapに返却する典型的コード。
Task Special Portsが何なのか？はよくわからん。

  if (master_device == MACH_PORT_NULL)
341     {
342       err = get_privileged_ports (0, &master_device);
343       if (err)
344         error (1, err, "get_privileged_ports");
345     }

何かの特権の必要そうなportを手に入れる。
--->そもそもportって何だ?

trivfs_startup() --> info hurd の5.2.1 Trivfs Startupに説明あり。

port_classは、$(HURD_SRC)/libports/に定義あり。
info hurdの3.2.1 Buckets and Classesに説明あり。
---> port_class/ backetのペアらしい。

いわゆるmachにとってのセッションって、mach_task_self()のようだ。

関数の中で関数を宣言するケースがおおいなー＞hurd。

例： $(HURD_SRC)/libports/manage-one-thread.c中の
　　 ports_manage_port_operations_one_thread()とか。

うは、devnodeって、libdde_linux26の仕組みよびだしてるぜ。
例：
　devnode/devnode.c-->ds_device_open-->device_open-->
    libmachdev/net.c-->search_netdev()-->libdde_linux26/lib/src/mach_glue/net.c

となってる。

むー、基本的な考え方がよめんぞおおおお。

demuxerはマルチプレクサの略か？

hack the hurdな文章↓
http://www.gnu.org/software/hurd/hacking-guide/hhg.html

hurdの概要（結構良い文章)↓
http://www.gnu.org/software/hurd/hurd-talk.html
http://www.gnu.org/software/hurd/hurd-paper.html

http://www.gnu.org/software/hurd/hacking-guide/hhg.htmlより、
5. hurd interfaces
You can find the interface definitions in the $(HURD)/hurd/*.defs files. Important are io.defs, password.defs, fsys.defs, fs.defs and auth.defs. The login.defs interface is nice, but not implemented so far and maybe it will never be. The *_reply.defs interfaces are — of course — for reply messages.

devnodeって、main.cは↓
http://www.gnu.org/software/hurd/hacking-guide/hhg.html
の8.4 The main functionのまんまだぁーっ

FAQが泣ける↓
Q: Why should I learn about Mach if the Hurd switches to L4 soon?
A: As of now, the Hurd uses Mach and you need to know Mach basics to do Hurd work. Maybe the Hurd will run on L4 in the future, but currently it's very, very far away from doing so.

hurdのlibcって相当変？
file_set_translator()が$(SRC_HURD)以下になかったので、
codesearch.d.nしたら、なんと、libc0.3にあったぜ。

hurd-libfuseってなんか自虐的じゃないのか？
※なんで、fuseのI/Fが欲しいんだ？意味が分からんぞ。

解決しないといけない疑問
---> どうやってmachとtranslatorは通信してんだ？
---> MIGの文法は？どういう仕組みでRPCしてんだ？
---> libtrivfsとか、libfshelpとか、libnetfsとかの使い方は？
---> linux26の使い方は？ddeってなに？
---> そもそもどうやって、Hurdはハードを叩いてんだ?
---> 動作を追いかける最もスマートな方法は？
---> 移植はどうやるんだ？え？
---> gnumachの内部構造
---> L4とは
　http://en.wikipedia.org/wiki/L4_microkernel_family
　http://www.l4hq.org/

"hello world" translator
--> 
8.2 Implementing trivfs callback functions
http://www.gnu.org/software/hurd/hacking-guide/hhg.html

$(HURD_SRC)/trans/hello.c
