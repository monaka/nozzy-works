Cyanogen mod環境作った。

Vultrでdisk typeを作る。

ここで、snapshotとか使いたかったが、
なんとひどいことにsnapshot１発取るのに60分だってさ。
60分もあれば、sidぐらい一発用意なので、以下の方法で作る。

 Step 1. vultrに公開鍵登録。（名前つけて、公開鍵カット＆ペースト）
 Step 2. debian 7でぶっこむ。
 Step 3. 出来上がると、rootで先に登録した公開鍵でrootログインが可能になる。
 Step 4. /etc/apt/source.listぶっこむ
  deb http://http.debian.net/debian/ sid main contrib non-free
  deb-src http://http.debian.net/debian/ sid main contrib non-free
 Step 5. apt-get update -o Acquire::PDiffs=false
 Step 6. aptitude full-upgrade
# Step 7. aptitude install sudo iptables-persistent xauth
 Step 7. aptitude install sudo iptables-persistent
 Step 8. vi /etc/hostname
         ----修正---
	 cyanogen0001
	 ----修正---
 Step 9. vi /etc/hosts (sudoでエラーでるので、抑止)
        127.0.0.1	localhost cyanogen0001

 Step 10. vi /etc/sudoers.d/xxxxx
 Step 11. groupadd -g 1000 yourname
          useradd -g yourname -s /bin/bash -m -u 1000 yourname

 Step 12. mkdir /home/yourname/.ssh;chmod 600 /home/yourname/.ssh;cp /root/.ssh/authorized_keys /home/yourname/.ssh/;chown yourname:yourname /home/yourname/.ssh/authorized_keys
 Step 13. vi /etc/ssh/sshd_config
     ----最終行に追加---
     UseDNS no
     ----最終行に追加---

 Step 14. exit;

 Step 15. mkdir work; cat > work/iptables.sh
--------ここから--------- 
#!/bin/sh
PATH=/bin:/usr/bin:/sbin:/usr/sbin
iptables -P INPUT DROP
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

iptables -F INPUT
iptables -F FORWARD
iptables -F OUTPUT
iptables -F -t nat

iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p icmp -j ACCEPT
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -m limit --limit 5/min -p tcp -j LOG --log-prefix '[Drop input]'
service netfilter-persistent save
service netfilter-persistent restart
exit 0
--------ここから--------- 
Step 16. sh. work/iptables.sh
Step 17. sync;sync;rebootする。
Step 18. ssh -X yourname@remoteしてuname -aすると、linux-3.16.0がぶっこまれているはず。
         ※注意：rootでsshのログインはできなくなるようにfull-upgradeの際調整されちゃう。
Step 19. andoroid sdkの入手：
wget http://dl.google.com/android/android-sdk_r24.1.2-linux.tgz
Step 20. 展開して、toolsディレクトリへ移動。
Step 21. sudo aptitude install openjdk-8
Step 22. ./android sdkでGUIが開く。


ちー、ssh -X でx11 forwardしようとしたら全然できないので、
はまった。
理由：xauthがリモート側に入ってない。
---> bugじゃね？

あー、./android sdkでGUIが開かず。
oraclejavaか？

あー、どうも何がわるさしてるかわからんので、
./android update sdk --no-ui
したら、いろいろ自動的にはいるようだ。
--->とにかくいらないものがガンガン入るので、やめた方が良い。
※実際、あとで、tools/androidでみるとわかるが、
 sdk全部にチェック入れてインストールしたのと等価。


あー、結局いろいろ試行錯誤したが、

　-　遠距離の遅い回線だと、ssh -X 越しのXはうまく動作できない。
　　xtermすらもまともに画面が出ない。

なので、

sudo aptitude install task-lxde-desktop

して、vultrのconsoleにlxdeを立ち上げたら、
tools/android が一発動作。Xのリンクよりきびきび動くので
こちらでOKじゃん？

※javaアプリケーションのせいで、consleメニューが無いのが罠。

まあ、とにかく、Xがないとandoroidのsdkすらまともに入れられないのが涙...

vultrのリモートコンソールに必要なフィルタが良くわからず。
なので、取り急ぎOutput方向に42653/tcpを開けてみたが、とりあえずうまく
いくが完全かは不明。googってもわからず。

リモートコンソールつきvultr様々。

あー、だめだー。512Megaだとメモリが足りん。
swapはONにしないとダメだー。
参考：
https://www.vultr.com/docs/setup-swap-file-on-linux
--->実際topで確認してるが、バリバリswapが使われるぞ?

ぐっは、supportから連絡来たが意味解らん。
instanceにより、portがかわる模様。

がああ、android sdkの最小限ですら遅い...
google遅いなぁ...

ぐっは、tuiだったら、
http://qiita.com/takakiku/items/69eb89f9af57d4138b7f
を見ながらtuiで出来るらしい。ぐっは。
くそがぁぁ！マニュアルに書いとけよ！

さらに、android sdkは32bitライブラリ。
なので、
http://superuser.com/questions/700800/debian-multi-arch-android-sdk
を参照して、32bit環境を手に入れるとなもし。

dpkg --add-architecture i386
aptitude update

aptitude install libc6-i386

してみた。
---> i386パッケージの導入はなさげなので、
　　　dpkg --remove-architecture i386
     した。

$ android update sdk -u -a -t tools,platform-tools

してみた。

すげーはええぜ。

adbについては、
sudo aptitude install libc-i386 lib32stdc++6

うおお、adbがうごいたぜー。

http://wiki.cyanogenmod.org/w/Build_for_ovation
を見ながら、残りを用意。

sudo aptitude installbison build-essential curl flex git gnupg gperf libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk2.8-dev libxml2 libxml2-utils lzop openjdk-8-jdk pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev 

sudo aptitude install g++-multilib gcc-multilib lib32ncurses5-dev lib32readline-gplv2-dev lib32z1-dev

------ここから
# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi
----ここまで
は、デフォルトですでに.profileに投入済み。

repo init -u https://github.com/CyanogenMod/android.git -b cm-12.1

なお、
git config --global user.email "your@email.com'
git config --global user.name 'your'
しとかないと、repoにて、gitが失敗に終わる。

cd ~/android/system
repo sync

これでダウンロードがガンガン行われる。

あー、ダウンロード長すぎて、途中でモバイル切れる....screenひっすだわー。

うげげげえ、disk instanceで負荷かけると悲惨：
%Cpu(s):  1.4 us,  3.1 sy,  0.0 ni,  0.0 id, 94.2 wa,  0.0 hi,  0.0 si,  1.4 st

って、94.2waってなんじゃそりゃー。どうりで、aptitude full-upgradeが
パッケージの割にクッソ遅いわーと思った。

とりあえず、リモート環境なので、なんだかんだ不安定な接続になるので、
aptitude install mosh tmux
して、

vultr側
iptables -A INPUT -m state --state NEW -m udp -p udp --dport 60001:60010 -j ACCEPT

note-pc側
iptables -A OUTPUT -m state --state NEW -m udp -p udp --dport 60001:60010 -j ACCEPT

しておき、

mosh nojima@cyanogen0001

すると、mosh経由でつながる。まあ、体感ではそんな便利なようには感じなかったなぁ。

とりあえず、moshしといて、念のため、tmux new-sessionしといた。

repo sync完了後、df したら、
~/android/system$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda1       124G   35G   83G  30% /

だってさ。35Gbytesもあるぜ。

tmuxでは、ctr-bがbindkeyと言われるもの。ctr-b ]で、バックスクロールとなるので、
矢印上下、あるいはPgUP/PgDNで上げ下げ。抜けるには、qをたたけばOK.
$ cd ~/android/system
$ source build/envsetup.sh
$ breakfast ovation 2>&1 | tee ../build.log

して、ビルド開始

しかし、ショックを受けるぐらい、DISKが遅せー。

moshは、まるで、screenのような扱いで紹介されるが、実際は、
ローカルエコー付きsshぐらいの機能しか無い。

なので、一度クライアントが死んじゃうと、２度とは接続できないので、
mosh serverして何か言われたら、すでに稼働しているmosh-serverを
killするのが正解。なので、screenなり、tmuxなりを併用するのが
通常の使い方。

※参考：
reattach to detached mosh sessions 
https://github.com/keithw/mosh/issues/394



