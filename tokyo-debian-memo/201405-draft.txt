やられたぜーっ

4/30
aptitutde updateしたら、
~/ ls -la /bin/systemd
lrwxrwxrwx 1 root root 20  4月 27 19:43 /bin/systemd -> /lib/systemd/systemd
█▓▒░nojima@nightmare░▒▓██▓▒░ 水  4月 30 11:15:41午後 
~/ ls -la /sbin/init  
lrwxrwxrwx 1 root root 20  4月 27 19:43 /sbin/init -> /lib/systemd/systemd

というわけでいつの間にやらsystemd!
--->こんな感じで/sbin/initdにsymlinkとなっているのはdebianならでわ。

※Gnome-shellで、勝手にNetwork managerが起動しちまってたのでなんだろうなぁ
と思ったので調べた。

このあたりの設定は、
https://wiki.debian.org/systemd

のとおりで。systemd-sysvぶちこまれたぜ。

くっそ、debian wikiはユーザランドの使い方は詳しくないのう。

またもや、systemdの使い方は、
https://wiki.archlinux.org/index.php/Systemd_(%E6%97%A5%E6%9C%AC%E8%AA%9E)
かー
---> 奥が深いのう。
　　　systemctlコマンドだけでなく、journalctlとかで起動ログを見ることができる。

どうも、systemctlコマンドで遊ぶらしい。

% systemctl
とやったら、pager起動して何やらでてきた...

どうもman systemctlするとわかるのであるが、

 systemctl
か、
 systemctl　list-unit-files

とやってお目当てのサービスを見つけ、

 sudo systemctl stop NetworkManager.service
 sudo systemctl enable NetworkManager.service
 sudo systemctl disable NetworkManager.service

とかするとOK。

ってゆーか、systemdってfreedesktop.orgだ。
本家：
http://freedesktop.org/wiki/Software/systemd/

ぐは。systemctlとbluetoothdとの相性が悪い...
→一々sudo systemctl restart bluetoothd.service
してやらんと正常起動せんがな...

 ----------------今月なにしようかな...-------------------
aptitude search dockerかしたら、

>p   docker.io                            - Linux container runtime  

aptitude show docker.io
パッケージ: docker.io                    
新規: はい
状態: インストールされていません
バージョン: 0.9.1~dfsg1-2
優先度: 任意
セクション: admin
メンテナ: Paul Tagliamonte <paultag@debian.org>
アーキテクチャ: amd64
展開サイズ: 22.2 M
依存: adduser, iptables, init-system-helpers (>= 1.18~), perl, libapparmor1 (>=
        2.6~devel), libc6 (>= 2.2.5), libdevmapper1.02.1 (>= 2:1.02.63),
        libsqlite3-0 (>= 3.5.9)
推奨: aufs-tools, ca-certificates, cgroupfs-mount | cgroup-lite, git, xz-utils
提案: btrfs-tools, debootstrap, lxc, rinse
説明: Linux container runtime
 Docker complements kernel namespacing with a high-level API which operates at
 the process level. It runs unix processes with strong guarantees of isolation
 and repeatability across servers. 
 
 Docker is a great building block for automating distributed systems:
 large-scale web deployments, database clusters, continuous deployment systems,
 private PaaS, service-oriented architectures, etc. 
 
 This package contains the daemon and client. Using docker.io on non-amd64 hosts
 is not supported at this time. Please be careful when using it on anything
 besides amd64. 
 
 Also, note that kernel version 3.8 or above is required for proper operation of
 the daemon process, and that any lower versions may have subtle and/or glaring
 issues.
ホームページ: https://github.com/dotcloud/docker

とのことらしい。

ほうほう：

https://wiki.debian.org/Docker

が早速あった。

debianのリポジトリ見ろよとあるのでみたら、まあ、なんかモリモリあった。
https://index.docker.io/_/debian/

で、wikiみると、

Ready-made images from docker.io's "official" Debian repository

Debian images provided in docker.io's official repositories (their "official images") are listed on their official debian images repository. These images are generated by the stackbrew application, based on the maintainer's image descriptions. At the time of writing, they are maintained in the maintainer's github repository.

ということなんで、

　　- stackbrewやら、
   - https://github.com/tianon/docker-brew-debian

を嫁！とのこと。

なお、最新のdockerはlxcとか使わず、name spaceとかゆーkernelの機能を利用するらしい。
が、debianは安定の遅い反映なので、
~/ uname -a                       
Linux nightmare 3.14-1-amd64 #1 SMP Debian 3.14.2-1 (2014-04-28) x86_64 GNU/Linux
は一応確認しとく。

~/ sudo aptitude install docker.io  
以下の新規パッケージがインストールされます:
  aufs-tools{a} cgroupfs-mount{a} docker.io libnih-dbus1{a} libnih1{a} makedev{a} 
  mountall{a} plymouth{a} 
更新: 0 個、新規インストール: 8 個、削除: 0 個、保留: 13 個。
4,322 k バイトのアーカイブを取得する必要があります。展開後に 23.8 M バイトのディスク領域が新たに消費されます。

一体cgroupsfsとか何だ？
aufsとは？

upstreamは、docker1.0か？

ところで、man docker.ioした結果にあるExamplesの
docker.io run busybox echo 'Hello world'

を実行してみるか...

いつの間にやら
~/ ps -auxww | fgrep docker
root      4613  0.0  0.1 352800  6944 ?        Ssl  16:34   0:00 /usr/bin/docker.io -d

なるものがうごいてやがりました。

Debian specificな仕様は
/usr/share/doc/docker.io/README.Debian
に記載されているようだ。
- dockerというコマンド名は他のすでにあるコマンドとぶつかるので、docker.ioにしたらしい。
- まあ、ありがちではあるが、useradd yourid dockerというコマンドを発行して
　ログインしなおすと、docker.ioコマンドを一般ユーザで扱える。


~/ sudo adduser nojima docker
ユーザ `nojima' をグループ `docker' に追加しています...
ユーザ nojima をグループ docker に追加
完了。

すげえ。

~/ fgrep docker /etc/group
docker:x:128:nojima

無事追加完了だ。まあ、どうせ、login/logoutしないとダメだと思うが。

で、docker.ioだが、真っ先に動作確認の例のとおり、
~/ docker.io run busybox echo 'Hello world'
をやってみたらできた。

~/ docker.io version
Client version: 0.9.1
Go version (client): go1.2.1
Git commit (client): 3600720
Server version: 0.9.1
Git commit (server): 3600720
Go version (server): go1.2.1
Last stable version: 0.11.1, please update docker

こんな事いわれた〜。

うお、一度インストールされちゃえばvergrantより鼻血出るほど簡単・軽量だ。

~/ docker.io run --help

Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

Run a command in a new container

  -P, --publish-all=false: Publish all exposed ports to the host interfaces
  -a, --attach=[]: Attach to stdin, stdout or stderr.
  -c, --cpu-shares=0: CPU shares (relative weight)
  --cidfile="": Write the container ID to the file
  -d, --detach=false: Detached mode: Run container in the background, print new container id
  --dns=[]: Set custom dns servers
  -e, --env=[]: Set environment variables
  --entrypoint="": Overwrite the default entrypoint of the image
  --expose=[]: Expose a port from the container without publishing it to your host
  -h, --hostname="": Container host name
  -i, --interactive=false: Keep stdin open even if not attached
  --link=[]: Add link to another container (name:alias)
  --lxc-conf=[]: Add custom lxc options -lxc-conf="lxc.cgroup.cpuset.cpus = 0,1"
  -m, --memory="": Memory limit (format: <number><optional unit>, where unit = b, k, m or g)
  -n, --networking=true: Enable networking for this container
  --name="": Assign a name to the container
  -p, --publish=[]: Publish a container's port to the host (format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort) (use 'docker port' to see the actual mapping)
  --privileged=false: Give extended privileges to this container
  --rm=false: Automatically remove the container when it exits (incompatible with -d)
  --sig-proxy=true: Proxify all received signal to the process (even in non-tty mode)
  -t, --tty=false: Allocate a pseudo-tty
  -u, --user="": Username or UID
  -v, --volume=[]: Bind mount a volume (e.g. from the host: -v /host:/container, from docker: -v /container)
  --volumes-from=[]: Mount volumes from the specified container(s)
  -w, --workdir="": Working directory inside the container
█▓▒░nojima@nightmare░▒▓██▓▒░ 金  5月 09 05:07:46午後 
~/ docker.io run -i -t -h busybox busybox /bin/bash
2014/05/09 08:08:14 exec: "/bin/bash": stat /bin/bash: no such file or directory
█▓▒░nojima@nightmare░▒▓██▓▒░ 金  5月 09 05:08:14午後 
~/ docker.io run -i -t -h busybox busybox /bin/sh  
/ # 
/ # 
/ # hostnmae
/bin/sh: hostnmae: not found
/ # hostnamae
/bin/sh: hostnamae: not found
/ # hostname
busybox
/ # 
ってな感じでshログインできた...

別窓で
~/ docker.io ps                        
CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES
694298c70f53        busybox:latest      /bin/sh             About a minute ago   Up About a minute                       cranky_mccarthy     

となった。また、別窓で、

~/ ip addr show
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000
    link/ether 3c:97:0e:47:44:dc brd ff:ff:ff:ff:ff:ff
3: wlan0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000
    link/ether 60:67:20:bf:3a:30 brd ff:ff:ff:ff:ff:ff
4: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default 
    link/ether 0e:72:53:c4:f7:9b brd ff:ff:ff:ff:ff:ff
    inet 192.168.2.1/24 brd 192.168.2.255 scope global br0
       valid_lft forever preferred_lft forever
    inet6 fe80::c72:53ff:fec4:f79b/64 scope link 
       valid_lft forever preferred_lft forever
5: br1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default 
    link/ether f2:08:33:d9:a0:12 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.1/24 brd 192.168.1.255 scope global br1
       valid_lft forever preferred_lft forever
    inet6 fe80::f008:33ff:fed9:a012/64 scope link 
       valid_lft forever preferred_lft forever
6: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether ba:b9:9e:89:53:4e brd ff:ff:ff:ff:ff:ff
    inet 172.17.42.1/16 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::2078:25ff:fea6:8923/64 scope link 
       valid_lft forever preferred_lft forever
7: ppp0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 3
    link/ppp 
    inet 1.79.108.116 peer 10.112.112.112/32 scope global ppp0
       valid_lft forever preferred_lft forever
15: veth9735: <BROADCAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master docker0 state UP group default qlen 1000
    link/ether ba:b9:9e:89:53:4e brd ff:ff:ff:ff:ff:ff
    inet6 fe80::b8b9:9eff:fe89:534e/64 scope link 
       valid_lft forever preferred_lft forever

というわけで、ちゃっかりdocker0というブリッジができてる。

また、docker側で
/etc # ping 192.168.1.1
PING 192.168.1.1 (192.168.1.1): 56 data bytes
64 bytes from 192.168.1.1: seq=0 ttl=64 time=0.066 ms
64 bytes from 192.168.1.1: seq=1 ttl=64 time=0.053 ms
64 bytes from 192.168.1.1: seq=2 ttl=64 time=0.051 ms
64 bytes from 192.168.1.1: seq=3 ttl=64 time=0.053 ms
64 bytes from 192.168.1.1: seq=4 ttl=64 time=0.052 ms
64 bytes from 192.168.1.1: seq=5 ttl=64 time=0.050 ms
ということなので、一応ホスト側は見えてるらしい。

/etc # ps
PID   USER     COMMAND
    1 root     /bin/sh
   29 root     ps

ということなので、initの代わりに/bin/shとは恐れ入る。

とりあえず、よくあるオペレーション
~/ docker.io ps          
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
694298c70f53        busybox:latest      /bin/sh             8 minutes ago       Up 8 minutes                            cranky_mccarthy     
█▓▒░nojima@nightmare░▒▓██▓▒░ 金  5月 09 05:16:52午後 
~/ docker.io top 

Usage: docker top CONTAINER [ps OPTIONS]

Lookup the running processes of a container

█▓▒░nojima@nightmare░▒▓██▓▒░ 金  5月 09 05:18:46午後 
~/ docker.io top 694298c70f53
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                4419                954                 0                   17:08               pts/2               00:00:00            /bin/sh
█▓▒░nojima@nightmare░▒▓██▓▒░ 金  5月 09 05:19:01午後 
~/ docker.io top 694298c70f53
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                4419                954                 0                   17:08               pts/2               00:00:00            /bin/sh
█▓▒░nojima@nightmare░▒▓██▓▒░ 金  5月 09 05:19:05午後 
~/ docker.io kill 694298c70f53
694298c70f53

ワー簡単だー。

で、コンテナ本体は、
 /var/lib/docker/aufs/diff
以下に設置される。

~/ docker.io search debian
とやると、イメージ一覧が得られる。


--------------どうでもよいが、
WEB DB Press PDF版　No.80みてびびったのが、
phantomjs
とゆーHeadless JS環境という変態なものがあるらしい...

日経Linux PDF版かってみた
--->ライター陣ものすげー（層が厚いぜ）。
　　デスクトップ絡みについて良くこれだけ調べたなと思う内容。また、
　　ものづくり系ハードネタが多いのもびっくりだ。

　　何故か超絶Ubuntuマンセー。んでもって、Debianの扱いは最悪。
　　Ubuntu: その他 = 99:1ぐらい差がある。
