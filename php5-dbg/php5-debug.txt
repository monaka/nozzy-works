デバッガでphp5をデバッグできるとよいこと
 ---> 要は、php5レベルで暴走してたりするとどこで暴走したのかがわかるとか...


デバッガでphp5-cliおいかけると、

compilerは $(PHP5SRC)/Zend/zend.c
 zend_execute_scripts()
    --> zend_compile_file()=phar_compile_file()($(PHP5SRC)/ext/phar/phar.c)
    
     


executerは 
 $(PHP5SRC)/Zend/zend_vm_execute.h中の
  342 ZEND_API void execute(zend_op_array *op_array TSRMLS_DC)

だったー。

 で、compile済みopcodeを使い、
   410			if ((ret = OPLINE->handler(execute_data TSRMLS_CC)) > 0) {

 を実行
  --> 
 $(SRC)/Zend/zend_vm_execute.h
 2359 static int ZEND_FASTCALL  ZEND_SEND_VAL_SPEC_CONST_HANDLER(ZEND_OPCODE_HAN      DLER_ARGS)      

へGo。

php5でデバッガってどうしてんのか？とおもったら、
例えばxdebugとかだと、

 560         /* Redirect compile and execute functions to our own */
 561         old_compile_file = zend_compile_file;
 562         zend_compile_file = xdebug_compile_file;
 563 
 564         xdebug_old_execute = zend_execute;
 565         zend_execute = xdebug_execute;
 566 
 567         xdebug_old_execute_internal = zend_execute_internal;
 568         zend_execute_internal = xdebug_execute_internal;
 
こんなことしてやがりました。ただ、xdebug_compile_fileは

1532 /* {{{ zend_op_array srm_compile_file (file_handle, type)
1533  *    This function provides a hook for the execution of bananas */
1534 zend_op_array *xdebug_compile_file(zend_file_handle *file_handle, int type      TSRMLS_DC)
1535 {
1536         zend_op_array *op_array;
1537 
1538         op_array = old_compile_file(file_handle, type TSRMLS_CC);
1539 
1540         if (op_array) {
1541                 if (XG(do_code_coverage) && XG(code_coverage_unused && XDEB     UG_PASS_TWO_DONE)) {
1542                         xdebug_prefill_code_coverage(op_array TSRMLS_CC);
1543                 }
1544         }
1545         return op_array;
1546 }
1547 /* }}} */

として、まあ、zend_compile_file()を呼んではいる。

xdebugによれば、current_execute_dataに現在実行中のステートメントに
対する中間コードなどが入ってる。

xdebugはexecuterでブレークポイントなどを制御。また、そりゃもう
カスタムの情報収集用コードを詰め込んでいろいろ記録。

現在実行中の行の情報は、xdebugの場合、
xdebug_execute()->xdebug_add_stack_frame()で得てる

current_execute_data->op_array->filename ---> 現在実行中のファイル名

(See. xdebug_build_fname()in xdebug_stack.c)
current_execute_data->function_state.function->common.function_name--->
現在実行中の間数名
NULLの場合は、
(PHP>5.0.3.99の場合)
current_execute_data->opline->exntended_valueにて、
ZEND_EVAL-->eval
ZEND_INCLUDE --> include
ZEND_REQUIRE --> require
ZEND_INCLUDE_ONCE --> include_once
ZEND_REQUIRE_ONCE ---> require_once
となる。なお、これ以外はFUNC_UNKONWNという扱いになり、
基本的にmain()の中である事を示唆する。



current_execute_data->function_state.function->common.scope --> class
(なお、__autoloadはNULL)

current_execute_data->function_state.function->common.scope->name --> static member名このあたりNULLだとclassに所属しない関数

current_execute_data->function_state.function->common.function_name == "{closure}"だと、closure.なお、このとき、
current_execute_data->function_state.function->op_array.filename,
current_execute_data->function_state.function->op_array.line_start,
current_execute_data->function_state.function->op_array.line_end
に情報がある。

また、
current_execute_data->opline!=NULLなら、
current_execute_data->opline->linenoが実行時の行数
current_execute_data->opline==NULLで、
current_execute_data->prev_execute_data->oplineがあれば、
current_execute_data->prev_execute_data->opline->linenoが実行時の行数

current_execute_data->opline ==NULLだったり、
current_execute_data->opline->opcode == ZEND_DO_FCALL_BY_NAME
だったりしたら、
current_execute_data->function_state.argumentsに引数の個数が入ってる。

そうじゃなかったら、p=zend_vm_stack_top(TSRMLS_C)-1して
とってきた*pにulongで引数の個数が入ってる。

で、op_arrayには、
op_array->arg_info[i].nameに引数の名前がある。


ちなみに、各関数へ渡す引数に
TSRMLS_XXとかある場合は、$(PHP5SRC)/TSRM/TSRM.hに定義がある。

TSRMLS_C-->tsrm_ls
のことらしい

EG(X)とは、いわゆるPHP本体についてはグローバル変数
しかしながら、threadとかでは独自の空間にグローバルもたないと
面倒なので、わざわざ(zend_executor_globals *)(*((void ***)tsrm_ls))[executor_globals_id-1])->Xして管理。

EX(X)とは、execute_data->Xの意味

で、取り急ぎphp5-cliでは、

(gdb) bt
#0  execute (op_array=0x7ffff7e5e360)
    at /tmp/buildd/php5-5.4.4/Zend/zend_vm_execute.h:410
#1  0x00000000006a028e in zend_execute_scripts (type=8, retval=0x7ffff7e5e318, 
    file_count=3) at /tmp/buildd/php5-5.4.4/Zend/zend.c:1279
#2  0x000000000063f863 in php_execute_script (primary_file=0x0)
    at /tmp/buildd/php5-5.4.4/main/main.c:2473
#3  0x00000000007491b3 in do_cli (argc=0, argv=0x7fffffffe979)
    at /tmp/buildd/php5-5.4.4/sapi/cli/php_cli.c:988
#4  0x000000000043110a in main (argc=32767, argv=0xdb9210)
    at /tmp/buildd/php5-5.4.4/sapi/cli/php_cli.c:1361

となっているので、TSRMLS_Cとかはからっぽ。
※ define ZTSしてると有効になる。

(gdb) p executor_globals.argument_stack->top
$14 = (void **) 0x7ffff7e2a110

というわけで、php5-cliでは、
EG(X)は、executor_globals.Xである。

取り急ぎ、これらのことをするようにpythonスクリプトを組んでみる...

しまった、pythonからgdbつかって解析するには、OPCODE->handlerの呼び出し
直前で対応の必要があった...

ところで、xdebugのデバッグ能力低すぎ...

まず、

　　前提：

　　　　1)とにかくリモートデバッグ
　　    2) web経由であれば、とにかくXDEBUG_SESSION_START=1をぶちこんで
　　　　　debuggerモードを機能させる事が必要
       3) 特権もたずにどうやってデバッグするんだ？

おっと、XDEBUG_CONFIG=1で、php5-cliはいける?

まあ、いずれにしても、xdebugの喋るDBGpのまともなclientはなぜかvimぐらい
しかない。

vim.orgがmysql絡みで死んでいるので、DBGpのクライアントは

git clone https://github.com/vim-scripts/DBGp-client

で落とす。

XDEBUG_CONFIG="idekey=DBGP" \
XDEBUG_SESSION_START=DBGP \
/usr/bin/php hoge.php
でいけるそうな。

が、なんと！debian sid付属のvimでは、pythonがenableになってないので、
debugger.pyとかのpythonベースのpluginが利用できないやんけ...
※なので、残念なことに、vim php5拡張がつかえんなぁ...
で、vim-pythonというパッケージがあったので、
aptitude install vim-pythonとかしたら、

~/ sudo aptitude install vim-python
"vim-python" は、以下のパッケージから提供されている仮想パッケージです:
  vim-nox vim-gtk vim-gnome vim-athena 
インストールするものを一つ選んでください。
インストール・削除・更新されるパッケージがありません。
更新: 0 個、新規インストール: 0 個、削除: 0 個、保留: 98 個。
0  バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。

とかだった....で、vim.noxとか入れたら、<F5>で無事debugger.pyがうごいたよ。

取り急ぎちょっと複雑そうなphp欲しかってので、学習負荷の少なそうなcakephp
を選んでみた。

aptitude install cakephp
mkdir public_html
cd public_html
php /usr/share/php/cake/console/cake.php bake `pwd`/blogtest
とかしてあとは質問に答えるとスケルトンが出来上がり。


取り急ぎ、cakephpでapacheの奴がうまく動いてくれんので、

 sudo aptitude install apache2-dbg入れて、
 /etc/apache2/apache2.conf
にて、

<IfModule mpm_prefork_module>
    StartServers          1
    MinSpareServers       1
    MaxSpareServers       1
    MaxClients            1

に設定して再起動し、
 sudo gdb /usr/sbin/apache2 PID

してデバッグ中....

 apacheのモジュール起動は、$(APACHE_SRC)/server/connection.c:190にて
ap_run_process_connection()の呼び出しによりかたっぱしからモジュールの
XXX_init()が起動されるようだ。

$(APACHE_SRC)/server/connection.c:40の
AP_IMPLEMENT_HOOK_RUN_FIRST(conn_rec *,create_connection,
 41                             (apr_pool_t *p, server_rec *server, apr_socket_t     *csd, long conn_id, void *sbh, apr_bucket_alloc_t *alloc),
がap_run_connectionの実体。

まあ、
AP_IMPLEMENT_HOOK_RUN_FIRST
により、ガツガツコードが生成されて実行されるみたい。

デバッガでおっかけると
$(APACHE_SRC)/modules/http/http_core.cの
 ap_run_process_connection()-->
    $(APACHE_SRC)/modules/http/http_core.cの
   ap_process_http_connection()

でリクエストが処理される。でここからさらにおっかけると、
$(APACHE_SRC)/server/config.cの
ap_invoke_handler()が呼び出され、
 377     result = ap_run_handler(r);
がどうもディスパッチャーのようだ。で、ap_run_handler()は
	AP_IMPLEMENT_HOOK_RUN_FIRST(int, handler, (request_rec *r),
159	                            (r), DECLINED)
をマクロ展開した内容のようである。
マクロ展開されている部分なので、展開前のソースしかおいかけられないため、
disasする。

(gdb) disas
Dump of assembler code for function ap_run_handler:
=> 0x00007faa93cfbb20 <+0>:	mov    0x230ec1(%rip),%rax        # 0x7faa93f2c9e8 <_hooks+40>
   0x00007faa93cfbb27 <+7>:	test   %rax,%rax
   0x00007faa93cfbb2a <+10>:	je     0x7faa93cfbb7a <ap_run_handler+90>
   0x00007faa93cfbb2c <+12>:	push   %r12
   0x00007faa93cfbb2e <+14>:	push   %rbp
   0x00007faa93cfbb2f <+15>:	push   %rbx
   ...中略...
    0x00007faa93cfbb5e <+62>:	callq  *(%rbx)


で、みてのとおり、0x00007faa93cfbb5eが心臓部なので、
b *0x00007faa93cfbb5e
して、siしてみると、

 handle_autoindex(mod_autoindex.c)-->cgi_handler(mod_cgi.c)-->
  handle_map_file(mod_negotiation.c)-->php_handler(php)
   -->handler_redirect(mod_rewrite.c)

で、再度

 handle_autoindex(mod_autoindex.c)-->cgi_handler(mod_cgi.c)-->
  handle_map_file(mod_negotiation.c)-->php_handler(php)
   -->handler_redirect(mod_rewrite.c)-->status_handler(mod_statuc.c)
   ---> default_handler(core.c)

btとると、handler_redirect(mod_rewrite)-->ap_internal_redirect(http_request.c)
 -->ap_invoke_handler(config.c)-->ap_run_handler(config.c)

となっている。

結論としては、symlinkされている場所で、mod_rewrite()すると、
redirectされた先の実体がsymlinkとかだと、正しくsymlinkを扱えないようだ。
でもこれはphpが悪さしているのか？

で、php_handler()のデバッグを試みたが、これがdebugシンボルと
実際のソースの対応がぐちゃぐちゃになってしまう。

--->なんじゃこりゃ...

なんとまあ、apache2では、user_directory使えるものの
mod_rewriteと組み合わせるには、rewrite先を/~nojima/blogtest/webxxxとか
の絶対pathにする必要あり。

例：
<IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteRule    ^$    /~nojima/blogtest/webroot/    [L]
    RewriteRule    (.*) /~nojima/blogtest/webroot/$1    [L]
 </IfModule>
こんな感じ。

でも、今度は...phpがうごかん...

でphpがuser_dirの組み合わせでうごかん理由はわかった。

/etc/apache2/mods-enable/php5.conf中にて
#<IfModule mod_userdir.c>
#    <Directory /home/*/public_html>
#        php_admin_value engine Off
#    </Directory>
#</IfModule>
の部分のようにコメントアウトが必要。

※実はphp_admin_value engine onにしても、何しても動かんかった...

cakephpは、$(APP)/tmp/logsなどにログを吐く

とりあえず、apacheにgdb attachして、
 set substitute-path /tmp/buildd/ /home/nojima/prog/debian/php5/
をぶちこみ、b executeすると、executorで実行停止する。

で、php-cliでは使えたcurrent_execute_dataが今回はGlobalエリアで
個別管理されるようになる（EG()が有効）のため、
execute_dataで情報を得てみる。


debianのdbgファイルっていろいろあって、

 1. apache2のように、objcopyで、デバッグシンボル付きの実行ファイル群を
　　　objcopy --only-keep-debug BINARY DBG-BINARY
　　として、わざわざ/usr/lib/debug/bin/以下とかに置き、
    BINARYにstripかけてから、
　　 objcopy --add-gnu-debuglink=DBG-BINARY BINARY

    として、debug情報のリンクのみ埋め込むという手を使うか、

 2. gstreamerのように、dh_strip --debug-pkg=XXXX-dbgとかして
　　対応するか

の２系統があるようだ。


dh_stripの処理の大半が、dbgパッケージ作りだった...

v9以上であれば、バイナリのBuild-IDを抜いて、dbgバイナリ作るのが仕事らしい。
（env LANG=C readelf -n origしてBuild ID: ([0-9a-f]{2})([0-9a-f]+)する。)

version 9以上は、/usr/lib/debug/.build-id/XX/YYYYYYYY.debug
にobjcopy --only-keep-debug --compress-debug-sections orig debug
として置く（XXはBuild ID:の最初の2桁、YYYYYYYはそれ以降の16進の桁全部）

version 8以下は  /usr/lib/debug/~にdebug symbol付きバイナリを
objcopy --only-keep-debug orig debug
として置く

そのあと、

strip --remove-section=.comment --remove-section=.note --strip-unneeded *.so

とか、

strip --remove-section=.comment --remove-section=.note binary

したあと、

objcopy --add-gnu-debuglink debug stripped-binary

してデバッグ情報だけ埋め込む。

なお、static libだけは、strip --strip-debugするのみ。

debian sidではgcc-4.7はhardened-ccというperlスクリプトだった...何をいっているか判らないと思うが(ry

gcc-4.7のソースおっかけると、
find  . -type f | xargs fgrep -i build-id

でごりゅごりゅでてくる。どうもlinkerが--build-idとかのオプションをサポートしている
かを調べているらしい。

実際にbuild idを算出しているのは、
binutils-2.22の
ld/emultempl/elf32.emとかで、

gld${EMULATION_NAME}_write_build_id_section(){
...中略...
  if (!strcmp (info->style, "md5"))
    {
      struct md5_ctx ctx;
      md5_init_ctx (&ctx);
      if (bed->s->checksum_contents (abfd,
                                     (void (*) (const void *, size_t, void *))
                                     &md5_process_bytes,
                                     &ctx))
        md5_finish_ctx (&ctx, id_bits);
      else
        return FALSE;
    }
  else if (!strcmp (info->style, "sha1"))
    {
      struct sha1_ctx ctx;
      sha1_init_ctx (&ctx);
      if (bed->s->checksum_contents (abfd,
                                     (void (*) (const void *, size_t, void *))
                                     &sha1_process_bytes,
                                     &ctx))
        sha1_finish_ctx (&ctx, id_bits);
      else
        return FALSE;
    }
  else if (!strcmp (info->style, "uuid"))
    {
      int n;
      int fd = open ("/dev/urandom", O_RDONLY);
      if (fd < 0)
        return FALSE;
      n = read (fd, id_bits, size);
      close (fd);
      if (n < (int) size)
        return FALSE;
    }
とかでいろいろ計算してるらしい。デフォルトはsha1。

まあ、ちょっとでも違えば、sha1は異なるしね...

んで、もってphp5はどうなってんのかなーとみると、

readelf -x .gnu_debuglink /usr/bin/php5とかすると、
セクション '.gnu_debuglink' の 十六進数ダンプ:
  0x00000000 70687035 00000000 451ecc3a          php5....E..:


となるため、シンボル参照のためのバイナリは
/usr/lib/debug/usr/bin/php5を参照せよという意味になる。

で、このあたりの細かい話は、
info gdb の Separate Debug Filesセクションを参照。
まあ、みるとわかるが、build-id系もあるぜ。

まーとにかくelfフォーマットは勝手気ままにsectionをつくれるなー。

~/prog/debian/binutils/binutils-2.22/ gdb 
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
(gdb) show debug-file-directory
The directory where separate debug symbols are searched for is "/usr/lib/debug".
(gdb) quit

こんなかんじだぜー。

で、v9なかんじなのは、libgstreamer0.10-0があるので、ためしに見てみる。

readelf -n /usr/lib/x86_64-linux-gnu/libgstreamer-0.10.so.0 

オフセット 0x000001c8, 長さ 0x00000024 の備考:
  所有者            データサイズ	説明
  GNU                  0x00000014	NT_GNU_BUILD_ID (一意なビルドID ビット列)
    ビルドID: 44ff321f11ffd750f8c351ffa3f5d20028d2f6a6

ということなので、

/usr/lib/debug/.build-id/44/ff321f11ffd750f8c351ffa3f5d20028d2f6a6.debug

があるはず。

~/prog/debian/binutils/binutils-2.22/ ls /usr/lib/debug/.build-id/44/ff321f11ffd750f8c351ffa3f5d20028d2f6a6.debug
/usr/lib/debug/.build-id/44/ff321f11ffd750f8c351ffa3f5d20028d2f6a6.debug

まあ、念のため、

$readelf -x .gnu_debuglink /usr/lib/x86_64-linux-gnu/libgstreamer-0.10.so.0

セクション '.gnu_debuglink' の 十六進数ダンプ:
  0x00000000 66663332 31663131 66666437 35306638 ff321f11ffd750f8
  0x00000010 63333531 66666133 66356432 30303238 c351ffa3f5d20028
  0x00000020 64326636 61362e64 65627567 00000000 d2f6a6.debug....
  0x00000030 0da0b0f5                            ....

とかすると、見事にファイル名ff321f11ffd750f8c351ffa3f5d20028d2f6a6.debug
が突っ込まれていたりする。

また、これら、/usr/lib/debug以下のファイルはfileコマンドとかとっても、
実行バイナリのようにしか見えないが、objdump -d とかすると、実行コードは
空っぽであることがわかる。まあ、info objcopyで、--only-keep-debug
の項目を見ればわかるが、基本的に--strip-debugの真逆をやるので、
こうなる。

php5のdbgパッケージ突っ込むと、line-no情報がフルパスではいっている
ので、gdb上から、substitute-pathでソースパスの変更が可能で便利であるが、
一方で、apacheのように絶対pathが入ってないdbg情報もある。

参考までに、

 readelf -x .debug_line /usr/lib/debug/usr/bin/php5として確認すると、

セクション '.debug_line' の 十六進数ダンプ:
  0x00000000 66240000 02005004 00000101 fb0e0d00 f$....P.........
  0x00000010 01010101 00000001 0000012f 746d702f .........../tmp/
  0x00000020 6275696c 64642f70 6870352d 352e342e buildd/php5-5.4.
  0x00000030 31352f65 78742f64 61746500 2f757372 15/ext/date./usr
  0x00000040 2f696e63 6c756465 2f783836 5f36342d /include/x86_64-
  0x00000050 6c696e75 782d676e 752f6269 7473002f linux-gnu/bits./
  0x00000060 746d702f 6275696c 64642f70 6870352d tmp/buildd/php5-
  0x00000070 352e342e 31352f5a 656e6400 2f757372 5.4.15/Zend./usr
  0x00000080 2f6c6962 2f676363 2f783836 5f36342d /lib/gcc/x86_64-
  0x00000090 6c696e75 782d676e 752f342e 372f696e linux-gnu/4.7/in
  0x000000a0 636c7564 65002f75 73722f69 6e636c75 clude./usr/inclu
  0x000000b0 6465002f 7573722f 696e636c 7564652f de./usr/include/
  0x000000c0 7838365f 36342d6c 696e7578 2d676e75 x86_64-linux-gnu
  0x000000d0 2f737973 002f7573 722f696e 636c7564 /sys./usr/includ
  0x000000e0 652f7838 365f3634 2d6c696e 75782d67 e/x86_64-linux-g
  0x000000f0 6e75002f 746d702f 6275696c 64642f70 nu./tmp/buildd/p
  0x00000100 6870352d 352e342e 31352f65 78742f73 hp5-5.4.15/ext/s
  0x00000110 74616e64 61726400 2f746d70 2f627569 tandard./tmp/bui
  0x00000120 6c64642f 70687035 2d352e34 2e31352f ldd/php5-5.4.15/
  0x00000130 6578742f 64617465 2f6c6962 002f746d ext/date/lib./tm
  0x00000140 702f6275 696c6464 2f706870 352d352e p/buildd/php5-5.
  0x00000150 342e3135 2f6d6169 6e000070 68705f64 4.15/main..php_d
  0x00000160 6174652e 63000100 00737472 696e6733 ate.c....string3

のようにほぼフルパスで情報が埋め込まれている。

apacheのソース対応ができんのは、 
readelf -x .debug_line /usr/lib/debug/usr/lib/apach2/mpm-prefork/apache2-mpm-prefork
してみるとわかるが、

  0x00000090 6e636c75 64652f61 70722d31 2e30002f nclude/apr-1.0./
  0x000000a0 6275696c 642f6275 696c6464 2d617061 build/buildd-apa
  0x000000b0 63686532 5f322e32 2e32322d 31332d61 che2_2.2.22-13-a
  0x000000c0 6d643634 2d4a4557 5a71392f 61706163 md64-JEWZq9/apac
  0x000000d0 6865322d 322e322e 32322f64 65626961 he2-2.2.22/debia
  0x000000e0 6e2f6275 696c642d 74726565 2f707265 n/build-tree/pre
  0x000000f0 666f726b 2f696e63 6c756465 00007479 fork/include..ty

というかんじで、

/build/buildd-apache2_2.2.22-13-amd64-JEWZq9/apache2-2.2.22/debian/build-tree/prefork/include

という感じでビルド中のディレクトリにならったソースが必要。そのため、

