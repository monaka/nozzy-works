--------さてここからが、php 5.4 ---------------------

デバッガでphp5をデバッグできるとよいこと
 ---> 要は、php5レベルで暴走してたりするとどこで暴走したのかがわかるとか...


デバッガでphp5-cliおいかけると、

compilerは $(PHP5SRC)/Zend/zend.c
 zend_execute_scripts()
    --> zend_compile_file()=phar_compile_file()($(PHP5SRC)/ext/phar/phar.c)

executerは 
 $(PHP5SRC)/Zend/zend_vm_execute.h中の
  342 ZEND_API void execute(zend_op_array *op_array TSRMLS_DC)

だったー。

 で、compile済みopcodeを使い、
   410			if ((ret = OPLINE->handler(execute_data TSRMLS_CC)) > 0) {

 を実行
  --> 
 $(SRC)/Zend/zend_vm_execute.h
 2359 static int ZEND_FASTCALL  ZEND_SEND_VAL_SPEC_CONST_HANDLER(ZEND_OPCODE_HAN      DLER_ARGS)      

へGo。

php5でデバッガってどうしてんのか？とおもったら、
例えばxdebugとかだと、

 560         /* Redirect compile and execute functions to our own */
 561         old_compile_file = zend_compile_file;
 562         zend_compile_file = xdebug_compile_file;
 563 
 564         xdebug_old_execute = zend_execute;
 565         zend_execute = xdebug_execute;
 566 
 567         xdebug_old_execute_internal = zend_execute_internal;
 568         zend_execute_internal = xdebug_execute_internal;
 
こんなことしてやがりました。ただ、xdebug_compile_fileは

1532 /* {{{ zend_op_array srm_compile_file (file_handle, type)
1533  *    This function provides a hook for the execution of bananas */
1534 zend_op_array *xdebug_compile_file(zend_file_handle *file_handle, int type      TSRMLS_DC)
1535 {
1536         zend_op_array *op_array;
1537 
1538         op_array = old_compile_file(file_handle, type TSRMLS_CC);
1539 
1540         if (op_array) {
1541                 if (XG(do_code_coverage) && XG(code_coverage_unused && XDEB     UG_PASS_TWO_DONE)) {
1542                         xdebug_prefill_code_coverage(op_array TSRMLS_CC);
1543                 }
1544         }
1545         return op_array;
1546 }
1547 /* }}} */

として、まあ、zend_compile_file()を呼んではいる。

xdebugによれば、current_execute_dataに現在実行中のステートメントに
対する中間コードなどが入ってる。

xdebugはexecuterでブレークポイントなどを制御。また、そりゃもう
カスタムの情報収集用コードを詰め込んでいろいろ記録。

現在実行中の行の情報は、xdebugの場合、
xdebug_execute()->xdebug_add_stack_frame()で得てる

current_execute_data->op_array->filename ---> 現在実行中のファイル名

(See. xdebug_build_fname()in xdebug_stack.c)
current_execute_data->function_state.function->common.function_name--->
現在実行中の間数名
NULLの場合は、
(PHP>5.0.3.99の場合)
current_execute_data->opline->exntended_valueにて、
ZEND_EVAL-->eval
ZEND_INCLUDE --> include
ZEND_REQUIRE --> require
ZEND_INCLUDE_ONCE --> include_once
ZEND_REQUIRE_ONCE ---> require_once
となる。なお、これ以外はFUNC_UNKONWNという扱いになり、
基本的にmain()の中である事を示唆する。



current_execute_data->function_state.function->common.scope --> class
(なお、__autoloadはNULL)

current_execute_data->function_state.function->common.scope->name --> static member名このあたりNULLだとclassに所属しない関数

current_execute_data->function_state.function->common.function_name == "{closure}"だと、closure.なお、このとき、
current_execute_data->function_state.function->op_array.filename,
current_execute_data->function_state.function->op_array.line_start,
current_execute_data->function_state.function->op_array.line_end
に情報がある。

また、
current_execute_data->opline!=NULLなら、
current_execute_data->opline->linenoが実行時の行数
current_execute_data->opline==NULLで、
current_execute_data->prev_execute_data->oplineがあれば、
current_execute_data->prev_execute_data->opline->linenoが実行時の行数

current_execute_data->opline ==NULLだったり、
current_execute_data->opline->opcode == ZEND_DO_FCALL_BY_NAME
だったりしたら、
current_execute_data->function_state.argumentsに引数の個数が入ってる。

そうじゃなかったら、p=zend_vm_stack_top(TSRMLS_C)-1して
とってきた*pにulongで引数の個数が入ってる。

で、op_arrayには、
op_array->arg_info[i].nameに引数の名前がある。


ちなみに、各関数へ渡す引数に
TSRMLS_XXとかある場合は、$(PHP5SRC)/TSRM/TSRM.hに定義がある。

TSRMLS_C-->tsrm_ls
のことらしい

EG(X)とは、いわゆるPHP本体についてはグローバル変数
しかしながら、threadとかでは独自の空間にグローバルもたないと
面倒なので、わざわざ(zend_executor_globals *)(*((void ***)tsrm_ls))[executor_globals_id-1])->Xして管理。

あー、一応、apacheのlibphp5程度だと、ZTSはONじゃないらしいので、
EG(X)-->executor_globas.Xになるようです。はい。（よかったね！）


EX(X)とは、execute_data->Xの意味

で、取り急ぎphp5-cliでは、

(gdb) bt
#0  execute (op_array=0x7ffff7e5e360)
    at /tmp/buildd/php5-5.4.4/Zend/zend_vm_execute.h:410
#1  0x00000000006a028e in zend_execute_scripts (type=8, retval=0x7ffff7e5e318, 
    file_count=3) at /tmp/buildd/php5-5.4.4/Zend/zend.c:1279
#2  0x000000000063f863 in php_execute_script (primary_file=0x0)
    at /tmp/buildd/php5-5.4.4/main/main.c:2473
#3  0x00000000007491b3 in do_cli (argc=0, argv=0x7fffffffe979)
    at /tmp/buildd/php5-5.4.4/sapi/cli/php_cli.c:988
#4  0x000000000043110a in main (argc=32767, argv=0xdb9210)
    at /tmp/buildd/php5-5.4.4/sapi/cli/php_cli.c:1361

となっているので、TSRMLS_Cとかはからっぽ。
※ define ZTSしてると有効になる。

(gdb) p executor_globals.argument_stack->top
$14 = (void **) 0x7ffff7e2a110

というわけで、php5-cliでは、
EG(X)は、executor_globals.Xである。

取り急ぎ、これらのことをするようにpythonスクリプトを組んでみる...

しまった、pythonからgdbつかって解析するには、OPCODE->handlerの呼び出し
直前で対応の必要があった...
--->あー、ダウト。ここでハンドラしかけるとまぢで構文１個に対する
　　OPCODEごとにハンドラが呼ばれてしまい...超遅い...

ところで、xdebugのデバッグ能力低すぎ...

まず、

　　前提：

　　　　1)とにかくリモートデバッグ
　　    2) web経由であれば、とにかくXDEBUG_SESSION_START=1をぶちこんで
　　　　　debuggerモードを機能させる事が必要
       3) 特権もたずにどうやってデバッグするんだ？

おっと、XDEBUG_CONFIG=1で、php5-cliはいける?

まあ、いずれにしても、xdebugの喋るDBGpのまともなclientはなぜかvimぐらい
しかない。

vim.orgがmysql絡みで死んでいるので、DBGpのクライアントは

git clone https://github.com/vim-scripts/DBGp-client

で落とす。

XDEBUG_CONFIG="idekey=DBGP" \
XDEBUG_SESSION_START=DBGP \
/usr/bin/php hoge.php
でいけるそうな。

が、なんと！debian sid付属のvimでは、pythonがenableになってないので、
debugger.pyとかのpythonベースのpluginが利用できないやんけ...
※なので、残念なことに、vim php5拡張がつかえんなぁ...
で、vim-pythonというパッケージがあったので、
aptitude install vim-pythonとかしたら、

~/ sudo aptitude install vim-python
"vim-python" は、以下のパッケージから提供されている仮想パッケージです:
  vim-nox vim-gtk vim-gnome vim-athena 
インストールするものを一つ選んでください。
インストール・削除・更新されるパッケージがありません。
更新: 0 個、新規インストール: 0 個、削除: 0 個、保留: 98 個。
0  バイトのアーカイブを取得する必要があります。展開後に 0  バイトのディスク領域が新たに消費されます。

とかだった....で、vim.noxとか入れたら、<F5>で無事debugger.pyがうごいたよ。

取り急ぎちょっと複雑そうなphp欲しかってので、学習負荷の少なそうなcakephp
を選んでみた。

aptitude install cakephp
mkdir public_html
cd public_html
php /usr/share/php/cake/console/cake.php bake `pwd`/blogtest
とかしてあとは質問に答えるとスケルトンが出来上がり。


取り急ぎ、cakephpでapacheの奴がうまく動いてくれんので、

 sudo aptitude install apache2-dbg入れて、
 /etc/apache2/apache2.conf
にて、

<IfModule mpm_prefork_module>
    StartServers          1
    MinSpareServers       1
    MaxSpareServers       1
    MaxClients            1

に設定して再起動し、
 sudo gdb /usr/sbin/apache2 PID

してデバッグ中....

 apacheのモジュール起動は、$(APACHE_SRC)/server/connection.c:190にて
ap_run_process_connection()の呼び出しによりかたっぱしからモジュールの
XXX_init()が起動されるようだ。

$(APACHE_SRC)/server/connection.c:40の
AP_IMPLEMENT_HOOK_RUN_FIRST(conn_rec *,create_connection,
 41                             (apr_pool_t *p, server_rec *server, apr_socket_t     *csd, long conn_id, void *sbh, apr_bucket_alloc_t *alloc),
がap_run_connectionの実体。

まあ、
AP_IMPLEMENT_HOOK_RUN_FIRST
により、ガツガツコードが生成されて実行されるみたい。

デバッガでおっかけると
$(APACHE_SRC)/modules/http/http_core.cの
 ap_run_process_connection()-->
    $(APACHE_SRC)/modules/http/http_core.cの
   ap_process_http_connection()

でリクエストが処理される。でここからさらにおっかけると、
$(APACHE_SRC)/server/config.cの
ap_invoke_handler()が呼び出され、
 377     result = ap_run_handler(r);
がどうもディスパッチャーのようだ。で、ap_run_handler()は
	AP_IMPLEMENT_HOOK_RUN_FIRST(int, handler, (request_rec *r),
159	                            (r), DECLINED)
をマクロ展開した内容のようである。
マクロ展開されている部分なので、展開前のソースしかおいかけられないため、
disasする。

(gdb) disas
Dump of assembler code for function ap_run_handler:
=> 0x00007faa93cfbb20 <+0>:	mov    0x230ec1(%rip),%rax        # 0x7faa93f2c9e8 <_hooks+40>
   0x00007faa93cfbb27 <+7>:	test   %rax,%rax
   0x00007faa93cfbb2a <+10>:	je     0x7faa93cfbb7a <ap_run_handler+90>
   0x00007faa93cfbb2c <+12>:	push   %r12
   0x00007faa93cfbb2e <+14>:	push   %rbp
   0x00007faa93cfbb2f <+15>:	push   %rbx
   ...中略...
    0x00007faa93cfbb5e <+62>:	callq  *(%rbx)


で、みてのとおり、0x00007faa93cfbb5eが心臓部なので、
b *0x00007faa93cfbb5e
して、siしてみると、

 handle_autoindex(mod_autoindex.c)-->cgi_handler(mod_cgi.c)-->
  handle_map_file(mod_negotiation.c)-->php_handler(php)
   -->handler_redirect(mod_rewrite.c)

で、再度

 handle_autoindex(mod_autoindex.c)-->cgi_handler(mod_cgi.c)-->
  handle_map_file(mod_negotiation.c)-->php_handler(php)
   -->handler_redirect(mod_rewrite.c)-->status_handler(mod_statuc.c)
   ---> default_handler(core.c)

btとると、handler_redirect(mod_rewrite)-->ap_internal_redirect(http_request.c)
 -->ap_invoke_handler(config.c)-->ap_run_handler(config.c)

となっている。

結論としては、symlinkされている場所で、mod_rewrite()すると、
redirectされた先の実体がsymlinkとかだと、正しくsymlinkを扱えないようだ。
でもこれはphpが悪さしているのか？

で、php_handler()のデバッグを試みたが、これがdebugシンボルと
実際のソースの対応がぐちゃぐちゃになってしまう。

--->なんじゃこりゃ...

なんとまあ、apache2では、user_directory使えるものの
mod_rewriteと組み合わせるには、rewrite先を/~nojima/blogtest/webxxxとか
の絶対pathにする必要あり。

例：
<IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteRule    ^$    /~nojima/blogtest/webroot/    [L]
    RewriteRule    (.*) /~nojima/blogtest/webroot/$1    [L]
 </IfModule>
こんな感じ。

でも、今度は...phpがうごかん...

でphpがuser_dirの組み合わせでうごかん理由はわかった。

/etc/apache2/mods-enable/php5.conf中にて
#<IfModule mod_userdir.c>
#    <Directory /home/*/public_html>
#        php_admin_value engine Off
#    </Directory>
#</IfModule>
の部分のようにコメントアウトが必要。

※実はphp_admin_value engine onにしても、何しても動かんかった...

cakephpは、$(APP)/tmp/logsなどにログを吐く

とりあえず、apacheにgdb attachして、
 set substitute-path /tmp/buildd/ /home/nojima/prog/debian/php5/
をぶちこみ、b executeすると、executorで実行停止する。

で、php-cliでは使えたcurrent_execute_dataが今回はGlobalエリアで
個別管理されるようになる（EG()が有効）のため、
execute_dataで情報を得てみる。

-->実は後でこれが厄介な問題を...
  execute_dataはgccのoptimizerにより中途では存在しない扱い
になってしまう。
　たまたま、
402         while (1) {
  403         int ret;
  404 #ifdef ZEND_WIN32
  405                 if (EG(timed_out)) {
  406                         zend_timeout(0);
  407                 }
  408 #endif
  409 
  410                 if ((ret = OPLINE->handler(execute_data TSRMLS_CC)) > 0) {

のl.410にて明示的にexecute_dataと等価のデータを参照する必要があるので、
l.410のみexecute_dataをgdb上から参照できるが、それより前では、
存在自体がかき消される（あくまで想像だが、EG(current_execute_data)を
直接仲介したコードになってしまうようだ）やるなオプティマイザめ！



debianのdbgファイルっていろいろあって、

 1. apache2のように、objcopyで、デバッグシンボル付きの実行ファイル群を
　　　objcopy --only-keep-debug BINARY DBG-BINARY
　　として、わざわざ/usr/lib/debug/bin/以下とかに置き、
    BINARYにstripかけてから、
　　 objcopy --add-gnu-debuglink=DBG-BINARY BINARY

    として、debug情報のリンクのみ埋め込むという手を使うか、

 2. gstreamerのように、dh_strip --debug-pkg=XXXX-dbgとかして
　　対応するか

の２系統があるようだ。
---> compat何番か？に依存

dh_stripの処理の大半が、dbgパッケージ作りだった...

v9以上であれば、バイナリのBuild-IDを抜いて、dbgバイナリ作るのが仕事らしい。
（env LANG=C readelf -n origしてBuild ID: ([0-9a-f]{2})([0-9a-f]+)する。)

version 9以上は、/usr/lib/debug/.build-id/XX/YYYYYYYY.debug
にobjcopy --only-keep-debug --compress-debug-sections orig debug
として置く（XXはBuild ID:の最初の2桁、YYYYYYYはそれ以降の16進の桁全部）

version 8以下は  /usr/lib/debug/~にdebug symbol付きバイナリを
objcopy --only-keep-debug orig debug
として置く

そのあと、

strip --remove-section=.comment --remove-section=.note --strip-unneeded *.so

とか、

strip --remove-section=.comment --remove-section=.note binary

したあと、

objcopy --add-gnu-debuglink debug stripped-binary

してデバッグ情報だけ埋め込む。

なお、static libだけは、strip --strip-debugするのみ。

debian sidではgcc-4.7はhardened-ccというperlスクリプトだった...何をいっているか判らないと思うが(ry

gcc-4.7のソースおっかけると、
find  . -type f | xargs fgrep -i build-id

でごりゅごりゅでてくる。どうもlinkerが--build-idとかのオプションをサポートしている
かを調べているらしい。

実際にbuild idを算出しているのは、
binutils-2.22の
ld/emultempl/elf32.emとかで、

gld${EMULATION_NAME}_write_build_id_section(){
...中略...
  if (!strcmp (info->style, "md5"))
    {
      struct md5_ctx ctx;
      md5_init_ctx (&ctx);
      if (bed->s->checksum_contents (abfd,
                                     (void (*) (const void *, size_t, void *))
                                     &md5_process_bytes,
                                     &ctx))
        md5_finish_ctx (&ctx, id_bits);
      else
        return FALSE;
    }
  else if (!strcmp (info->style, "sha1"))
    {
      struct sha1_ctx ctx;
      sha1_init_ctx (&ctx);
      if (bed->s->checksum_contents (abfd,
                                     (void (*) (const void *, size_t, void *))
                                     &sha1_process_bytes,
                                     &ctx))
        sha1_finish_ctx (&ctx, id_bits);
      else
        return FALSE;
    }
  else if (!strcmp (info->style, "uuid"))
    {
      int n;
      int fd = open ("/dev/urandom", O_RDONLY);
      if (fd < 0)
        return FALSE;
      n = read (fd, id_bits, size);
      close (fd);
      if (n < (int) size)
        return FALSE;
    }
とかでいろいろ計算してるらしい。デフォルトはsha1。

まあ、ちょっとでも違えば、sha1は異なるしね...

んで、もってphp5はどうなってんのかなーとみると、

readelf -x .gnu_debuglink /usr/bin/php5とかすると、
セクション '.gnu_debuglink' の 十六進数ダンプ:
  0x00000000 70687035 00000000 451ecc3a          php5....E..:


となるため、シンボル参照のためのバイナリは
/usr/lib/debug/usr/bin/php5を参照せよという意味になる。

で、このあたりの細かい話は、
info gdb の Separate Debug Filesセクションを参照。
まあ、みるとわかるが、build-id系もあるぜ。

まーとにかくelfフォーマットは勝手気ままにsectionをつくれるなー。

~/prog/debian/binutils/binutils-2.22/ gdb 
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
(gdb) show debug-file-directory
The directory where separate debug symbols are searched for is "/usr/lib/debug".
(gdb) quit

こんなかんじだぜー。

で、v9なかんじなのは、libgstreamer0.10-0があるので、ためしに見てみる。

readelf -n /usr/lib/x86_64-linux-gnu/libgstreamer-0.10.so.0 

オフセット 0x000001c8, 長さ 0x00000024 の備考:
  所有者            データサイズ	説明
  GNU                  0x00000014	NT_GNU_BUILD_ID (一意なビルドID ビット列)
    ビルドID: 44ff321f11ffd750f8c351ffa3f5d20028d2f6a6

ということなので、

/usr/lib/debug/.build-id/44/ff321f11ffd750f8c351ffa3f5d20028d2f6a6.debug

があるはず。

~/prog/debian/binutils/binutils-2.22/ ls /usr/lib/debug/.build-id/44/ff321f11ffd750f8c351ffa3f5d20028d2f6a6.debug
/usr/lib/debug/.build-id/44/ff321f11ffd750f8c351ffa3f5d20028d2f6a6.debug

まあ、念のため、

$readelf -x .gnu_debuglink /usr/lib/x86_64-linux-gnu/libgstreamer-0.10.so.0

セクション '.gnu_debuglink' の 十六進数ダンプ:
  0x00000000 66663332 31663131 66666437 35306638 ff321f11ffd750f8
  0x00000010 63333531 66666133 66356432 30303238 c351ffa3f5d20028
  0x00000020 64326636 61362e64 65627567 00000000 d2f6a6.debug....
  0x00000030 0da0b0f5                            ....

とかすると、見事にファイル名ff321f11ffd750f8c351ffa3f5d20028d2f6a6.debug
が突っ込まれていたりする。

また、これら、/usr/lib/debug以下のファイルはfileコマンドとかとっても、
実行バイナリのようにしか見えないが、objdump -d とかすると、実行コードは
空っぽであることがわかる。まあ、info objcopyで、--only-keep-debug
の項目を見ればわかるが、基本的に--strip-debugの真逆をやるので、
こうなる。

おっと、build-idについては、

 binutilsへ寄贈されたパッチ↓
  http://sourceware.org/ml/binutils/2007-07/msg00012.html

※ sourceware.org binutilsはofficial

build-id解説↓
http://fedoraproject.org/wiki/RolandMcGrath/BuildID



php5のdbgパッケージ突っ込むと、line-no情報がフルパスではいっている
ので、gdb上から、substitute-pathでソースパスの変更が可能で便利であるが、
一方で、apacheのように絶対pathが入ってないdbg情報もある。

理由→
　　1) apache2は、gccにファイルパス渡すときに
　　　 cd xxxxx && gcc -g -c file.c
      とやっているため、ディレクトリ情報が消えてしまう。

　　2) php5は、逆にgccにファイルパス渡すときに
　　　 gcc -g -c `pwd`/file.c
       とわざわざやっているため、ディレクトリ情報が含まれる。

　(dpkg-buildpackageで、apache2/php5をそれぞれbuildするとわかる)

取り急ぎ、現在実行中のphp5上のソース位置と、現在どこの関数スコープにいるのか？
について表示するpythonスクリプトを書いて実行してみたが...遅っせー

---> どうもexecute()は何度も呼ばれるみたいで、
     execute() l.410の場所でブレークすると細かいOPコード
　　　ごとにブレークかかるので超遅いみたいだ。
　　　（もちろん、gdb.parse_and_evalが超絶に重いという話もあるが)


php5上の変数は

while(i<op_array->last){
     op_array->opcodes[i].op1.var ;<-なんか入ってるばあいがある。
     op_array->opcodes[i].op2.var ;<-なんか入っているばあいがある
     i++
}

でみれるか？

おお、そういや、gdb上からは、python　XXXXXで、XXXXを実際に
評価できるので、かたっぱしから試行錯誤してスクリプトも起こせますな。
ということです。

(gdb)python data=gdb.parse_and_eval("executor_globals.current_execute_data")
(gdb) python print data.address
0x7f941fc1f400
(gdb) python print data.type
struct _zend_execute_data *

また、gdb.Valueのヘルプみたかったら、
(gdb) help(gdb.Value)とかするとみれるぞ。

どうも、execute()に渡されるop_array->filenameは、最初に呼び出されたプログラム
名っぽいな...
--->いっちょ引き抜いてみるかー。
で、EG(current_execute_data)->op_array->filename
は現在実行されているところのop_arrayと、ファイル名。
EG(current_execute_data)->prev_execute_dataは前回のcurrent_execute_dataか？

EG(opline_ptr)という不思議なものがあり、
(*EG(opline_ptr))->linenoに実行中の行番号がはいる時がある。
（EG(opline_ptr)==0x0などあるので注意）

1) EG(current_execute_data)==0x0の時はとにかく'{main}'の中。
   XFUNC_NORMALをxdebugではfunction.typeとして指定

2) EG(current_execute_data)==0x0の場合、行番号は必ず0で。

3) EG(current_execute_data)!=0x0の場合、いろいろパターンがある。

あー、gdbでバイナリに干渉するのは、gdb.parse_and_eval()がめちゃめちゃ
重たいので、大量の変数を参照する時には効率わるいので注意がいる。

 しらなかったが、

(gdb) python edata=gdb.parse_and_eval("executor_globals.current_execute_data")
(gdb) python print edata
0x7fffae7ef4f0

のときに、
(gdb) python print edata.dereference()
とすると、
{opline = 0x0, function_state = {function = 0x7fa7f27264c8, arguments = 0x7fa7faa3a108}, fbc = 0x7fa7f26b8938, called_scope = 0x7fa7f2721190, op_array = 0x0, object = 0x7fa7f26c4ec8, Ts = 0x7fa7faa39500, CVs = 0x7fa7faa39490, symbol_table = 0x7fa7f2721670, prev_execute_data = 0x7fa7faa39400, old_error_reporting = 0x0, nested = 1 '\001', original_return_value = 0x0, current_scope = 0x7fa7f272d1c0, current_called_scope = 0x7fa7f272d1c0, current_this = 0x7fa7f271fa28, current_object = 0x0}
のように中身が一応でてくる。(gdb.Valueが新たに作成される）
で、このdereference()は超強力で、
    gdb_test "python fp2 = fp2.dereference()" ""
    gdb_test "python result2 = fp2(10,20)" ""
    gdb_test "python print result2" "30"
みたいな芸当が可能。

また、*をひとつづつつけていく場合---> edata.referenced_value()
     一気に*をつけまくって全部解除---> edata.dereference()
という違いがある。

で、今回の件だと、以下のような便利ことが可能。
(gdb.Value強力だぜー）

(gdb) python curr_exec=edata.dereference()
(gdb) python print cur_exec['opline']
0x0
(gdb) print print cur_exec['function_state']['function']
0x7fa7f27264c8
(gdb) python print (cur_exec['function_state']['function']).dereference()
{type = 2 '\002', common = {type = 2 '\002', function_name = 0x7fa7f2725ef8 "handleError", scope = 0x7fa7f2721190, fn_flags = 134283520, prototype = 0x0, num_args = 5, required_num_args = 2, arg_info = 0x7fa7f272f468}, op_array = {type = 2 '\002', function_name = 0x7fa7f2725ef8 "handleError", scope = 0x7fa7f2721190, fn_flags = 134283520, prototype = 0x0, num_args = 5, required_num_args = 2, arg_info = 0x7fa7f272f468, refcount = 0x7fa7f2725840, opcodes = 0x7fa7f26a9c20, last = 161, vars = 0x7fa7f2729e08, last_var = 16, T = 53, brk_cont_array = 0x7fa7f2725880, last_brk_cont = 1, try_catch_array = 0x0, last_try_catch = 0, static_variables = 0x0, this_var = 4294967295, filename = 0x7fa7f27206d0 "/usr/share/php/cake/libs/debugger.php", line_start = 247, line_end = 318, doc_comment = 0x7fa7f2729ca0 "/**\n * Overrides PHP's default error handling.\n *\n * @param integer $code Code of error\n * @param string $description Error description\n * @param string $file File on which error occurred\n * @param in"..., doc_comment_len = 341, early_binding = 4294967295, literals = 0x7fa7f26acc30, last_literal = 96, run_time_cache = 0x0, last_cache_slot = 28, reserved = {0x0, 0x0, 0x0, 0x0}}, internal_function = {type = 2 '\002', function_name = 0x7fa7f2725ef8 "handleError", scope = 0x7fa7f2721190, fn_flags = 134283520, prototype = 0x0, num_args = 5, required_num_args = 2, arg_info = 0x7fa7f272f468, handler = 0x7fa7f2725840, module = 0x7fa7f26a9c20}}

なんて芸当が可能。これを応用して、current_execute_dataから、
prev_execute_data引き抜いてさらにop_arrayの中を覗いてみる。
(gdb) python print (((cur_exec['prev_execute_data'].dereference())['op_array']).dereference())['filename']
0x7fa7f27756b0 "/usr/share/php/cake/libs/configure.php"

まぢかー。
さらにマヂカーと言う例：
(gdb) python print cur_exec['prev_execute_data']['op_array']['filename']
0x7fa7f27756b0 "/usr/share/php/cake/libs/configure.php"

すごすぎ。

で、わざと、未初期化ポインタに触ってみる
(gdb) python print cur_exec['op_array']['filename']
Traceback (most recent call last):
  File "<string>", line 1, in <module>
gdb.MemoryError: Cannot access memory at address 0x90
Error while executing Python code.
とのことで、0x90に触ろうと思ったら、exception発生。

ありゃ、しまった、連想配列呼び出しで自動的にdereference()されるので、
python edata['prev_execute_data']['op_array']['filename']
0x7fa7f27756b0 "/usr/share/php/cake/libs/configure.php"

一発だった。

xdebugから、どうやって変数の値抜くのかみてみたら、
xdebug_var.cにてやってた。で、みるとパターンは以下のとおり。

 EG(active_symbol)をzend_hash_find()にかけて値をひきずりだすらしい。

ちょっとしたアイデアだが、引数のポインタへめがけて値返す奴は
別にalloca()したメモリをgdbでひろって突っ込んで渡すでどうでっしゃろ？


で、zend_hash_find()をキーワードにしてphp5.5のソースvimgrepしてみたが、
結局変数の値を引きずり出すのに有用なAPIはなかったぜ。なので、今回の
発表では、変数を引きずり出すには、gdb+pythonでzend_hash_find()を
呼び出すようなスクリプトを自力作成する必要あり。

あ、参考までに、vimgrepの使い方：
 :vimgrep /zend_hash_find/ **/*.c | cw
（ちなみに、vimgrepもquickfix.txtのhelpマニュアルにある）
とかやると、vimのquickfix機能で、grepの結果をみながら、
ソースを見れる。

xdebugでvalueをみるなら、xdebug.cのxdebug_debug_zvalが役に立つ?
xdebugのstep実行などは xdebug.cのxdebug_statement_callが役に立つ？

xdebug_var.cには、xdebug_get_php_symbolというよさげなのがあるぜ？
（これが、symboleテーブルからzend_hash_find()つかって値引きずり出す）

gdbにpython interactiveモード搭載されたのは、gdb 7.6からのようだ。
gdb 7.6 released!
http://lwn.net/Articles/548781/


--------さてここまでが、php 5.4 ---------------------

うぎゃー、sidでupgradeしたら、phpは5.5.0になり、内部構造ががらり
とかわってるうぅぅぅー。

まず、execute()が居なくなった。代わりに複数のexecute関数がいるようだ。
-->実際には、zend_execute_internalと、zend_execute_exに変わった。
　　（zend_execute()はzend_execute_exのラッパー）

executorの類は全部、Zend/zend_execute_API.cにあるようだ。

また、APIが充実したようで、
　　Zend/zend_execute_API.c:  const char *get_active_class_name(const char **space TSRMLS_DC)
　　nite,
　　　で現在のクラス名、（引数のspaceは、つなぎが"::"か、""かをかえす）
   Zend/zend_execute_API.c: const char* get_active_function_name()
    で、EG(current_excute_data)から現在の関数名を得る事ができ、
   Zend/zend_execute_API.c: const char* zend_get_executed_filename()
    で、EG(active_op_array)から現在実行中のファイル名を、
   Zend/zend_execute_API.c: uint zend_get_executed_lineno()
    で、linenoを、
   Zend/zend_execute_API.c: zend_bool zend_is_executing()
    で現在実行中か（EG(in_execution)の値）を
 GETできる。

うはー、これらの情報を抜くのに参考になるのが、$(PHP5SRC)/main/main.cの
php_verror()だったりする...
(eval/include/include_once/require/require_once/Unknownとか作成してる...)
また、main/outoput.cのphp_output_header()にて、linenoと、filenameの
両者を抜いていた...
※他は大抵exceptionハンドリングで利用されるらしい。

なんか、上の関数群をもとにソースgrepすると、Zend/zend_dtrace.cという
dtrace意識したコードが入ってるぜ。
---->見ると、これ全部enableにしてくれよーというピンポイントな
　　 DTrace用関数群が...
    char *dtrace_get_exected_filename()とか、

↑デバッガ作りに超参考になるなる...
(今回は、Zend/zend_dtrace.cをgdb+pythonでエミュレートしてみた）

Zend/zend_builtin_functions.c: debug_print_backtrace()
という素敵なものがあるぞ。backtraceとれるんちゃう？
See. http://www.php.net/manual/ja/function.debug-print-backtrace.php
これのzend_api版として、Zend/zend_builtin_functions.c:
zend_fetch_debug_bucktrace()というのがある。
debug_backtrace()というのがどうもzend_fetch_debug_bucktrace()の
ラッパー関数。
See. http://php.net/manual/ja/function.debug-backtrace.php

php5.5では、zend_execute_internal(),zend_execute_ex()になってた。

げ、function callは、
Zend/zend_excute_API.c: zend_call_function()にて対応か？


取り急ぎ、gdb.Value()で格納して呼んでみた。
(gdb) python phpfile=(gdb.parse_and_eval("get_active_function_name")).dereference()
(gdb) python print phpfile()
0x7ffff3b0b6a8 "getInstance"

こんな感じ。

がああ、char *について、gdb.Value()はstringに直す際に、gdbの内部関数を使うため、
どうやっても、

　0xabcdef "xxxxxx"

のような文字列しか返さない。なので、文字列だけ抜きたかったら、毎度
((str(gdb.Value())).partition(' '))[2]
とかしなければならない。


-----文章書きにつかった件------

squeezeのgdb-7.0.1-2+b1にて、内臓バイナリを調べると、
amd64版では、libpython2.6.so.1.0がdynamicリンクされていたため、
--with-python扱いとおもわれ。同様にi386版もpythonがリンク
されていた。

debian-sid ではgdb は7.6-3となる。
wheezyだとgdbは7.4.1となる。

---------------資料-----------

なんでgdb+python

debianのdbgパッケージ

php5をデバッグしてみる
  ---> xdebug+vim+debugger.pyじゃだめなのか
　---> んじゃいっちょやってみる

仕組み
  --->

おわりに

----------------プレゼン項目------

 なんでgdb+python

 php5にゃ便利なデバッガが
 -> apache+ xdebug + vim+ debugger.py plugin

 便利じゃん→だが断る！
　（メモリに常駐しちゃったり、突然暴走ぶっこいてるプロセスデバッグしたくない？）

 ここで、debianのデバッグシンボルの話

　--->仕組みおさらい

　debianのdebugの仕方

　---> dbgパッケージにはシンボルにはいってるパス定義が2系統あるぜよ。
  ---> だったら、それにあわせてのtips


 諸君！私はデバッグが好きだ
  ---> 
