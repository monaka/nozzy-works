
gnome3では、gdm後にxsession経由か、gdm3直接起動かしらんが、gnome-sessionが
sessionマネージャとして走ってgnome-shellが起動される予定。

なお、この時gnome-sessionの
/usr/share/gnome-session/sessions/にて、
gdm-fallback.sessionが選択されるか、
gdm-shell.sessionが選択されるかして、
どちらかのモードが選ばれる。

ここで、defaultファイルである、
/usr/share/gnome-session/sessions/gnome.sessionみると、
/usr/lib/gnome-session/gnome-session-check-accelerated
を動かしてチェックするような事がデフォルトで記載されたりする。

$XDG_CONFIG_HOME/gnome-session/saved-sessionにも
savedセッションとして保存されるので、こちらも見られる。

gnome-session,
gnome-session-save
gnome-session-properties

の３つがgnome-sessionを管轄するコマンド。
他のコマンドなどは、
gnome-session-binパッケージに一通り入ってる。

gnome-session-quitは電源OFFやら、logoffやら担当。

ためしに、
env DISPLAY=:0.0 gnome-session-quit --logout --no-prompt
とかすると、動いているgnome-sessionが停止し、問答無用のログアウトになる。

おっと、なんで
gnome3にて、spice経由であがらんのか良く判ったぜ。
/usr/lib/gnome-session/gnome-session-check-accelerated
が（実際にはgnome-session-check-accelerated-helperが）
/usr/share/gnome-session/hardware-compatibility
を見て（このあたりはどうもハードコーディングされてた)、libGLあたりのチェックぶっこくと、
----ここから----
# Intel 830-865
-Intel\(R\) 8[[:digit:]]{2,2}[^[:digit:]]

# Pre-R300 radeon
-Mesa DRI R[12]00[^[:digit:]]
-Mesa DRI R[12]00$

# Old Mesa software GL renderer
-software rasterizer

# Gallium has softpipe and llvmpipe
-softpipe
-llvmpipe
---ここまで------

こんな事が記載されているのでうまくいかんのじゃぁ。

※たとえ、hardware-compatibility-helper突破してもな。

なんてこった、gnome-session-quitは単にdbusめがけて指令ブチ込むだけでしたー。

なんてこった２

gnome-session-check-acceleratedは、ちょっとwindowのお膳立てをして、
gnome-session-check-accelerated-helperを呼び出すものでした...

gnome-session-3.4.2.1/tools/gnome-session-check-accelerated-helper.c
の以下のコードにニヤリ。
125                                 else /* invalid value */
126                                         ret = 0xDEAD;

DEADって、16進数だったんだー。

で、おもしろいのは、kernelの起動オプションで、gnome.fallback=数字
というのがfallbackで強制アップかどうかを検出する仕組みだった。

とゆーわけで、起動オプションで、gnome.fallback=0とすると
強制的にgnome-shellはgnome-session-check-acceleratedの検査を
スキップして立ち上がるぜ。
--->成功した。
(sid,wheezyともに)

とゆーわけで、llvmだとか、gallium3dだとかお構いなしに立ち上がるぜ。

まあ、ネタとして、virt-viewerでいけるかどうかは試してみようかな。

ただ、debian jessie/sidだといろいろbuggyだけどな。
※gnome-shellのアクティビティ叩いただけで、いろいろ誤動作。

おー、glxgearsで、spiceな環境で、74FPSぐらいは出たぜ。ちょっとガクガクだがな。

とおもって、virt-viewerでやってみたら、笑えるぐらいダメダメ。
glxgearsでは、27.45FPSだった。藁。
おまけにスゲエbuggy。まともにつかえんわー。

さて、gallium3d+llvmpipeでイカシタ状況でwaylandいってみようか。

ごは、llvmpipeのHP(http://www.mesa3d.org/llvmpipe.html)みると、
Support for SSE2 is strongly encouraged. Support for SSSE3 and SSE4.1 will yield the most efficient code. 
らしいので、試しにKVMにて、cpu typeを俺様環境にあわせ、
x86         core2duo  Intel(R) Core(TM)2 Duo CPU     T7700  @ 2.40GHz 
に強制指定してspiceな環境で再度チャレンジしてみよっかなー。
（/proc/cpuinfoによれば、
processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 23
model name	: Intel(R) Core(TM)2 Duo CPU     U9400  @ 1.40GHz
stepping	: 6
microcode	: 0x60c
cpu MHz		: 800.000
cache size	: 3072 KB
physical id	: 0
siblings	: 2
core id		: 1
cpu cores	: 2
apicid		: 1
initial apicid	: 1
fpu		: yes
fpu_exception	: yes
cpuid level	: 10
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl aperfmperf pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 lahf_lm ida dtherm tpr_shadow vnmi flexpriority
bogomips	: 2793.11
clflush size	: 64
cache_alignment	: 64
address sizes	: 36 bits physical, 48 bits virtual
power management:
なので、最強(藁）スペックだー）

この最高スペックを指定すべく、

  <cpu mode='host-passthrough'/>

つっこんでみた。すんごいことに、Gust上でも、/proc/cpuinfoしたら、
Hostといっしょの能力のCPUが1個みえたぜ。

んー、glxgears は、58〜60FPSだな。

で、試しに、

      <model type='qxl' ram='65536' vram='65536' heads='1'>
        <acceleration accel2d='yes'/> 
      </model>

を付け加えたところ、glxgears 74FPSぐらいは出たぜ。なので、cputypeは
あんまし影響無いなぁ。

ちゅーことで戻す。

まあ、わかったことは、gallium3d+llvmpipeで結構でるっちゅーねん。

で、やってみた。irrlicht1.8をつっこみ、demoの11.PixelPerLightで、
4〜5 FPSは出たぜ。
(Gallium 0.4 on llvmpipe (LLVM 3.2, 128 bits): VMware, Inc.)

まず、
Mesa DRI Mobile Intel® GM45 Express Chipset : Intel Open Source Technology Center
のハードウェアアクセラレーションの元では、FPS:51は安定して軽い。

次に,ベアの

env LIBGL_ALWAYS_SOFTWARE=1 ./11.PerPixelLighting 
Gallium 0.4 on llvmpipe (LLVM 3.2, 128 bits): VMware, Inc.
だと、FPS:12〜15ぐらい。

gallim3d
http://akademy2008.kde.org/conference/slides/zack-akademy2008.pdf

が本家。
(Video : http://stecchino.blip.tv/file/1181861/)

わかりやすい資料は↓
Gallium3D Mesa's New Driver Model
http://www.slideshare.net/olvaffe/gallium3d-mesas-new-driver-model

以前DRIはどうだったかというと...
Data Flow Diagram
http://dri.sourceforge.net/doc/dri_data_flow.html
Control Flow Diagram
http://dri.sourceforge.net/doc/dri_control_flow.html
というまさに、
http://akademy2008.kde.org/conference/slides/zack-akademy2008.pdf
のpp.4のような状況そのもの。

つまりは、DRIがもう大変なことになってたので、
State Trackerと、hwに特化したpipeと、OS/環境依存のpipeにわけちゃえ
という発想で組み直したのがgallium3d。

で、hwに特化したpipeのsoft版rendererは
http://www.mesa3d.org/llvmpipe.html
であり、llvmの機能（動的コンパイラ等込み）を搭載した
めちゃめちゃ速いsoftrendererとなる。

mesa-9.1.6付属の
mesa-9.1.6/src/gallium/docs/以下のレンダリング済み文章
http://people.freedesktop.org/~csimpson/gallium-docs/


なんと、llvmpipeのそこいら中にLLVMの手続きが埋め込まれており、
どうもLLVM Code Representationを使ったコンパイラ（ちゅーか、
オプティマイザ付きアセンブラ）が動く
しくみのようだ。 ニモニックに相当するのはLLVM Intermediate Representation (IR)
つまり、LLVM IRというらしい。
http://www.aosabook.org/en/llvm.html

やるこた
Shaders, point/line/triangle rasterization and vertex processing are implemented with LLVM IR which is translated to x86 or x86-64 machine code.
ということだそうな。まあ、OpenGLって、〜して〜して、んだばレンダリング
してちょ？視点や、カメラの位置はかえるけどな？というような使い方なので、
こういうことできるんですな...たぶん。

そんじゃー、waystonと、waylandいってみようか。

どうでもよいが、linux-image-3.10から、KMS cirrusドライバ
がKVMでも利用できる。

 Step1. libvirtで、cirrus&vncつかえるようにする。
 Step2. debianをKVMでたちあげて、virt-viewerとかでつなぎ、
 Step3. 一旦 sudo service gdm3 stop
 Step4. sudo modprobe cirrus modeset=1
        ※modeset=1がないと絶対にロードされない
 Step5. いきなりコンソール解像度がvirt-viewerで変わる。
 Step6. dmesg | fgrep drmとかすると、drmのcirrusが有効になったことがわかる。

で、xinitとかでいろいろしてみたが、残念ながら、fbdevがKMSなcirrusに
対応していないようで、まったくうごかんぜ。

では、このままwaylandであそぼうとしてみる。

waylandの遊び方：くやしいが、archlinuxがくわしいぜ。
https://wiki.archlinux.org/index.php/Wayland

なぜか、libwayland側は入っているので、
sudo aptitude install weston

するとよい。

ssh して、sudo service gdm3 stop
実行

weston-lanunchではclear_env()されてしまうので、
XDG_RUNTIME_DIRはどうやっても指定できず。なので、
export XDG_RUNTIME_DIR=/tmp
export EGL_DRIVER=/usr/lib/x86_64-linux-gnu/egl/egl_gallium.so
weston --log weston.log 

したが、egl初期化失敗
(実際にはlibgbmで、ドライバ見つからず?
　PCI deviceのリストからドライバ見つからず）

でdrm cirrusではしゅーりょー。

あと良く分からんオプション--use-pixmanというのがあり、
こいつを設定すると、libgdm1が吹っ飛び、westonが死ぬ。

あと、westonのソースみるとわかるが、DISPLAY環境変数あると、
backendとしてxが利用されるらしいぜ。

で、cirrus&vncの結論。

Step 1. Guest OSから、xinitでXあげ。
Step 2. sudo -s -u root -H
Step 3. export XDG_RUNTIME_DIR=/tmp
Step 4. export EGL_DRIVER=/usr/lib/x86_64-linux-gnu/egl/egl_gallium.so
Step 5. 見えているxtermから、westonを実行
　　　　　→glにより全画面奪われ、shellが走る。
Step 6. 別の端末から、KVMへsshする。
Step 7. sudo -s -u root -H
Step 8. export XDG_RUNTIME_DIR=/tmp
Step 9. weston-terminalすると...terminalが現れる。

よかったね！

ここで、cirrus&vncだと画面ぐちゃぐちゃでつかいもんにならんわ。
で、ここで、われらが、qxl+spiceでやってみた。

Step 3. export XDG_RUNTIME_DIR=/tmp
Step 4. export LANG=C
Step 5. gnome-xtermから、westonを実行

weston-terminalとか普通に動く。

（LANG=ja_JP.utf8でやたら横に長い理由はバグのようです：
　https://bugassistant.libreoffice.org/show_bug.cgi?id=63796。
）

chromium-bsuとかいれてみたが、クソ遅くて正直つかいものにならんわー。

llvmpipeがdebianで使える?っていう2012年8月ころの投稿。
http://forums.debian.net/viewtopic.php?f=5&t=82860

lvmpipeはどうも、mesa-9.2シリーズでさらに劇速になるらしい。
http://www.phoronix.com/scan.php?page=article&item=mesa_92dev_llvmpipe&num=1

gnome3がllvmpipeで動いたのはどうも2011/11/03っぽいかな。
http://www.happyassassin.net/2011/11/03/fedora-16-is-gold-but-more-importantly/
http://www.phoronix.com/scan.php?page=news_item&px=MTAxMTI
http://www.phoronix.com/scan.php?page=news_item&px=MTAxMjI

llvmpipe driverは、どうも、2009/9/28のMesa 7.6で搭載されたようだ。
file:///home/nojima/prog/debian/mesa/mesa-9.1.6/docs/relnotes-7.6.html

Gallium3Dは2007/11/13のようだ。
file:///home/nojima/prog/debian/mesa/mesa-9.1.6/docs/index.html

では、ちょっと、gtk-3-examples 3.8.2-3

https://wiki.gnome.org/Wayland/GTK+
みながら、weston-terminalから、
exprot GDK_BACKEND=wayland
aptitude install gtk-3-examples
して、
gtk3-demo
したら、
(gtk3-demo:3370): Gdk-ERROR **: Unsupported GDK backend: wayland
Trace/breakpoint trap

といわれてうごかねー。

----- wheezyでもやってみた---
sudo virt-install --connect=qemu:///system -n debian-wheezy01 --ram 512 --cdrom /home/nojima/prog/net-image/debian-7.1.0-amd64-netinst.iso --disk /var/lib/libvirt/images/debian-wheezy01,bus=virtio,size=10,format=raw,cache=writeback --bridge=br0,model=virtio --graphics spice,port=5901,disable-ticketing --hvm --accelerate --noautoconsole

してみたが、disable-ticketingがうまく指定できずに、認証にTLS使おうとqemuが
エラー吐いてなにもできねー。

 virt-installのソースみるとわかるが、vnc依存が結構凄い。--graphics spiceと
やっても勝手にvirt-viewerを動かそうとするぜ。

というわけで、

sudo virt-install --connect=qemu:///system -n debian-wheezy01 --ram 512 --cdrom /home/nojima/prog/net-image/debian-7.1.0-amd64-netinst.iso --disk /var/lib/libvirt/images/debian-wheezy01,bus=virtio,size=10,format=raw,cache=writeback --bridge=br0,model=virtio --graphics spice,port=5901 -d --hvm --accelerate --noautoconsole

して考えてみた。

すると、

-----デバッグ出力---
...中略...
  <graphics type='spice' port='5901' tlsPort='-1'/>
---中略...
[金, 16  8月 2013 18:56:24 virt-install 15015] ERROR (cli:445) unsupported configuration: Auto allocation of spice TLS port requested but spice TLS is disabled in qemu.conf
[金, 16  8月 2013 18:56:24 virt-install 15015] DEBUG (cli:448) 
Traceback (most recent call last):
  File "/usr/bin/virt-install", line 636, in start_install
    noboot=options.noreboot)
  File "/usr/lib/pymodules/python2.7/virtinst/Guest.py", line 1249, in start_install
    noboot)
  File "/usr/lib/pymodules/python2.7/virtinst/Guest.py", line 1317, in _create_guest
    dom = self.conn.createLinux(start_xml or final_xml, 0)
  File "/usr/lib/python2.7/dist-packages/libvirt.py", line 2892, in createLinux
    if ret is None:raise libvirtError('virDomainCreateLinux() failed', conn=self)
libvirtError: unsupported configuration: Auto allocation of spice TLS port requested but spice TLS is disabled in qemu.conf
[金, 16  8月 2013 18:56:24 virt-install 15015] DEBUG (cli:457) 仮想マシンのインストールが成功したように見えません。
----ここまで

となり、どうも勝手にtlsPort='-1'を突っ込んでしまう挙動だ。

で、なぜかしらんが、VirtualGraphics.pyにて、tlsportは、
値指定してなくても(Value=None)、勝手に-1指定と決め打ちされてしまい、
こちらが原因で勝手にtls指定されてしまう。

See. VirtualGraphics.py
class VirtualGraphics(VirtualDevice.VirtualDevice):

つまりは、virt-installのバグ。実は最近までlibvirtがtlsport attribute
を勝手に指定しまうのを防ぐなどの議論が。
このあたり。
Subject: [libvirt] [PATCHv2] Error out when using SPICE TLS with spice_tls=0
http://osdir.com/ml/libvir-list/2012-02/msg00985.html

正直いってクソ面倒なので、vncでやることに。

 sudo virt-install --connect=qemu:///system -n debian-wheezy01 --ram 512 --cdrom /home/nojima/prog/net-image/debian-7.1.0-amd64-netinst.iso --disk /var/lib/libvirt/images/debian-wheezy01,bus=virtio,size=10,format=raw,cache=writeback --bridge=br0,model=virtio --vnc --hvm --accelerate

いっぱつだった。

で、しらべると。
westonはexperimentalだけ。

http://packages.debian.org/search?keywords=weston&searchon=names&suite=all&section=all

藁。

-----------------
weston-1.1.1

westonのmain関数は、src/compositor.cにあるっぽい。

src/compositor.cでさがすと、
なんと、wl_display_createとかは、wayland側にあるぜ。
--->つまりは、サーバーの抽象部分のコードはlibwaylandのなか。

で、weston-1.1.1/compositor-XXXX.cにてハードウェア初期化を行う。
ハード初期化エントリ部分はbackend_init()が担当。
->compositor-rpi.cってRasspberry Piのcompositorだった....)
->compositor-headlessってよくわからんが、画面なしモードのようだ。
-> compositor-fbというのがlinux frame buffer経由でハンドリング
　　---> udlfbというのはDisplayLinkとよばれ、USBで画面だせるやつ。
        See. https://wiki.archlinux.org/index.php/DisplayLink
   ---> cirrusならいけるぜ。
　      今度やってみよう。
　 ---> vesafbではどうかなー。
       よーわからんが、uvesafbというのが該当か?
       
modprobe uvesafbとかしてみたところ、
/sbin/v86dとかがないとかでエラーにあった。
なんじゃこりゃ？
--> aptitude show v86dとかすると、
------中略-----
daemon to run x86 code in an emulated environment
 v86d provides a backend for kernel drivers that need to execute x86 BIOS code. The code is
 executed in a controlled environment and the results are passed back to the kernel via the
 netlink interface. 
 
 v86d is needed by the uvesafb kernel module.
ホームページ: http://dev.gentoo.org/~spock/projects/uvesafb/
-----ここまで------
ということらしい。

で、qxlの元で
aptitude install v86d
とかして、ブートプロンプトで、
video=uvesafb:1024x768-32@60とかやってみたが、
uvesafbがvesa bios見つからんのでコケてNGだった。

あー、普通にmodprobe cirrusfbしただけだと、
[01:26:58.108] Calculating pixman format from:
                - type: 0 (aux: 0)
                - visual: 3
                - bpp: 8 (grayscale: 0)
                - red: offset: 0, length: 8, MSB: 0
                - green: offset: 0, length: 8, MSB: 0
                - blue: offset: 0, length: 8, MSB: 0
                - transp: offset: 0, length: 0, MSB: 0
となり、westonが対応できるフォーマットである、
TRUECOLORではない為、起動できず。
fbset -fb /dev/fb0 -g 1024 768 1024 768 24
とかして強制的にTRUECOLORにしてみたが、westonが起動して、
ioctl(fd, FBIOGET_VSCREENINFO)の返り値が、
なぜか元のまま。

---> virt-viewer にてvt 8に切り替えてから、別コンソールで、
     fbset -fb /dev/fb0 -g 1024 768 1024 768 24
　　　とかしたら、今度はちゃんとbpp:24 visual2 で読み込んでくれた。
　　　で、
      env LANG=C weston --backend=fbdev-backend.so
      で起動に成功！Yeah!

env LANG=C weston --modules=tablet-shell.so --backend=fbdev-backend.so
したら、tabletモードになった。が、weston-terminal
しても何も起動せず。キーバインディングもよくわからん。

---- KVMでのうごかしかた----
virt-viewer で、Ctl-ALT-F1
rootでログイン

service gdm3 stop
fbset -g 1024 768 1024 768 24
export XDG_RUNTIME_DIR=/tmp
env LANG=C weston --backend=fbdev-backend.so




root@debian-sid0:/home/nojima# fbset -i

mode "640x480-60"
    # D: 25.175 MHz, H: 31.469 kHz, V: 59.940 Hz
    geometry 640 480 1024 768 24
    timings 39722 48 16 33 10 96 2
    accel true
    rgba 8/16,8/8,8/0,0/0
endmode

Frame buffer device information:
    Name        : CL Picasso4
    Address     : 0xfc000000
    Size        : 4194304
    Type        : PACKED PIXELS
    Visual      : TRUECOLOR
    XPanStep    : 1
    YPanStep    : 1
    YWrapStep   : 0
    LineLength  : 3072
    Accelerator : Trident BladeXP


compositor-fbdev.cのソースから、
fbdev_frame_buffer_open()-->fbdev_query_screen_info()-->exit()
のBadEndコースでした。


ところで、pixmanって、drmでつかえるんだがこれなに。
A Software-Based Pixman Renderer For Wayland's Weston
http://www.phoronix.com/scan.php?page=news_item&px=MTI2Nzg

なんかしらんが、MIT-shmでやるそうな。

本家↓
pixman
http://pixman.org/

しらんかった。こんなのがあるのかー。compositor-x11.cで
しらべても--use-pixman=1がある。おおー。

Xのうえで、
weston --use-pixman=1
としたら動いた。で、
Using pixman renderer
とかでてるんだな。これが。

ちょっと早くなった気がする。うそかもしらんが。
pixmanはcairographics.orgの生産物
-> http://cairographics.org/




で、さらにcodesearch.debian.netとかで探すと、wayland用のコードが
なぜかmesaのegl/以下に...

なぜか、libwaylandはwheezyにもある。ver 0.85だけどな。

debianでは、westonコンパイルののちインストールは、
debian/install
で指定されているバイナリのみ。

なぜだろう？

実際、
aptitude build-dep weston
aptitude install jpeg-dev
で、

dpkg-buildpackageでbuildして
$(src)/client/
以下にテストクライアントである、
flower,
gears
....
等が入ってる。

cirrus+fb経由だと、gearsは8FPSだってさ。
flower ---> 縁なし非四角のウィンドウを出すデモ
calibrator--->タッチパネル用の調整
clickdot  ---> 線引くデモ
cliptest
dnd --> drag and drop test
editor ---> form入れのテスト。ソフトキーボードでてくる。
eventdemo-->よくわからん
image---> image image-fileとやると表示される。
smoke ---> 煙の描画テスト

まあ、こんなもんか。

-----------xもしゃべらせる---------
sudo -s -u root -H
update-rc.d gdm3 disable
cat .conf/weston.ini
-----ここから----
[core]
modules=xwayland.so,desktop-shell.so
-----ここまで----
export XDG_RUNTIME_DIR=/tmp
modprobe cirrusfb
fbset -g 1024 768 1024 768 24
cat /etc/X11/xorg.conf
-----ここから---
Section "Device"
	Identifier "Device"
	Driver "fbdev"
EndSection
-----ここまで---
env LANG=C weston --log=weston.log --backend=fbdev-backend.so

でもね、desktop-shellにweston-terminalはでないわ、
Xはあがってないわでうまく行っている様にはみえん。

weston-terminalから、
export DISPLAY=:0.0
xlogo
とかやってみたが、
Can't open display
といわれてしゅーりょー。

いちおう、単体でxinitしてみたが、無問題で起動できる。
