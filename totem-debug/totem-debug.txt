totemは以下のようにuiを作る

 main()--> gtk_init()
       --> g_signal(command-line)-->app_command_line-->app_init()(←ここですべてを組み立てる）

app_init()は/usr/share/totem/totem.uiをみてGUIを組み立てる

今回字幕なので-->subtitles-menuの項目--->select-subtitle-->select_subtitle_action_callback

で、
select_subtitle_action_callback()(src/totem-menu.c 1096)-->
    totem_playlist_select_subtitle_dialog()(src/totem-playlist.c)
    
ここでsubtitle変更を処理。
playlist->priv->modelのSUBTITLE_URI_COLに登録

どうも、totem_playlist_get_current_mrl()(src/totem-playlist.c 2448)にて
subtitleのデータをplaylist->priv->modelのSUBTITLE_URI_COLから得るようだ。

で、totem_playlist_get_current_mrl()はsrc/totem-object.c,src/totem-session.c
からガンガン呼び出される。

src/totem-object.cのadd_to_playlist_and_play_cb()にて、
それらしい呼び出しがある。
 518                 mrl = totem_playlist_get_current_mrl (playlist, &subtitle);
 519                 totem_action_set_mrl_and_play (data->totem, mrl, subtitle);
                      --->totem_object_action_play
                           --->bacon_video_widget_play()
                               (src/backend/bacon-video-widget-gst-0.10.c)
が、字幕についての記述がないー

 bacon_video_widget_open()(src/backend/bacon-video-widget-gst-0.10.c)
にて、
 g_object_set (bvw->priv->play, "uri", bvw->priv->mrl,
3874                 "suburi", subtitle_uri, NULL);

とあるので、suburiという名前のbvw上のオブジェクトがどうも字幕のurl格納先らしい。
また、subtitle-encodingというのがある。

bacon_video_widget_new（）(src/backend/bacon-video-widget-gst-0.10.c)で
gstreamer用のパイプライン及びbvwオブジェクトを作りまくる
                      
totemは起動したら、様々なthreadを作り、メインのthreadはそのまま
終了してしまう。これらのthreadは協調して動作をする作り。

main->g_application_run
      -> thread LWP 4379作成
　　　　　->app_startup->app_command_line->app_init->long_action->video_widget_creat
                                          -> thread LWP 4380作成
　　　　　　　　　　　　　　　　　　　　　　　
いったいどこだ？.srtファイルの判別部分は...
どうやってもエレガントなみつけだしかたがわからん...

とりあえず、baconから、gstreamerのplaybin2を利用していることはなんとなく
わかったので、以下の方法でテスト

gst-launch playbin2 uri=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.ogv suburi=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt

無事、

パイプラインを一時停止 (PAUSED) にしています...
Pipeline is PREROLLING ...
Missing element: application/x-subrip デコーダー
WARNING: from element /GstURIDecodeBin:uridecodebin1: タイプ 'application/x-subrip' 用のデコーダーが利用可能ではありません。
追加のデバッグ情報:
gsturidecodebin.c(874): unknown_type_cb (): /GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1
WARNING: from element /GstURIDecodeBin:uridecodebin1/GstDecodeBin2:decodebin20: GStreamerはプラグインを見つけることができません
追加のデバッグ情報:
gstdecodebin2.c(3576): gst_decode_bin_expose (): /GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1/GstDecodeBin2:decodebin20:
no suitable plugins found
Pipeline is PREROLLED ...
パイプラインを再生中 (PLAYING) にしています...
New clock: GstPulseSinkClock
^CCaught interrupt -- handling interrupt.
割り込み: パイプラインを停止しています...
Execution ended after 19527083155 ns.
パイプラインを一時停止 (PAUSED) にしています...
Setting pipeline to READY ...
Setting pipeline to NULL ...
Freeing pipeline ...

な感じでx-subripのデコーダが無いとかいわれる。

なんと！gst-launchはgst-run.cだったーっ
※なんじゃこりゅぁぁぁーっ

というわけで、

$gst-launch --print playbin2 uri=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.ogv suburi=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt
/usr/bin/gst-launch-0.10 playbin2 uri=file:///home/nojima/???/debconf12/857_Bits_from_the_Release_Team.ogv suburi=file:///home/nojima/???/debconf12/857_Bits_from_the_Release_Team.srt

とのこと。gst-run.cはどうも、正しいバージョンのサフィックスをプログラムにつけて起動
するだけのラッパーらしい...

だから、gdbでdebugするなら、/usr/bin/gst-launch-0.10を直接やるべき。

で、
cd ~/prog/my-work/gdb-python/test-function/
gdb --args gst-launch-0.10 playbin2 uri=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.ogv suburi=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt

(gdb) source test-func.py
(gdb) prepcalltree
(gdb) run
したところ、すごいことに、
gstreamerは、指定したエレメントがthreadで動き、GstBusめがけて、各エレメント
がメッセージを送ってくる。で、このメッセージを解釈してイベントハンドリング
するしくみだったぜ。
See. gst-launch.c中のevent_loop()の設計

んでもって、x-substrのmissingは、GST_MESSAGE_ELEMENTタイプで
ぶちこまれるmissing-pluginといわれるメッセージ。

で、気をとりなおして、
cd ~/prog/debian/gst-plugins-base0.10/gst-plugins-base0.10-0.10.36/ 
find . -name '*.[ch]'  | xargs fgrep 'srt'
すると、どうも、
./gst/subparse/gstsubparse.c
に中身があるらしい。
みるとちゃんとsubrip形式のsubtitleをカバーできてるやんけ--->どうかな？それはどうかな？

 gst-launch-0.10 -v playbin2 uri=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.ogv suburi=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt

すれば、実は豊富なdebuging traceがとれるというオチ...

gstreamerのアプリケーションの作り方マニュアルを読むと、なんか
解析の糸口をつかんだ気がする....

取り急ぎ、

gst-typefind ~/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt 
/home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt - application/x-subrip


といわれるので、mime判定はgst-typefindを調べるとわかるかもしれず...
と思って調べたら凹むぜ。またもやgst-runだ。
gst-typefind-0.10  ~/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt

が正しいぜ。


gst-typefind-0.10は
字幕ファイルタイプを算出するのに、gst-plugins-base0.10を利用し、
gst/subparse/gstsubparse.cにて、
 plugin_init→ gst_subparse_type_find→ gst_type_find_suggest(tf)にて
ファイルタイプ可能性を送出
--->とおもって、gst_subparse_type_findを調べたらgst_type_find_peek()で
　　早々にabortしてやがった...

typefindというelementのgstreamer pluginは、coreelementsといい、
 $GST/plugins/elements/gstelements.cにある。

gstreamerはとにかくデバッグが面倒なのでコードに埋め込まれた様々な
デバッグコードを起動できるようにGST_DEBUGという環境変数を用いた
I/Fが用意されている。なお、デバッグスイッチは、man gst-launch
とか、gsteamerコマンドの--gst-debug-helpとかすると一覧が得られる。

env GST_DEBUG=typefindfunctions:9  gst-typefind-0.10 ~/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt

とかやると、どうやってtypefindfunctionsがmimeタイプを求めてるかを表示できる。

-----例---------------
~/prog/debian/libglib/glib2.0-2.33.12+really2.32.4/ env GST_DEBUG=typefindfunctions:9  gst-typefind-0.10 ~/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt 
0:00:00.646480667 10489      0x11cd580 LOG        typefindfunctions gsttypefindfunctions.c:4310:start_with_type_find: trying to find mime type image/png with the first 8 bytes of data
0:00:00.647108121 10489      0x11cd580 LOG        typefindfunctions gsttypefindfunctions.c:4310:start_with_type_find: trying to find mime type audio/x-amr-nb-sh with the first 5 bytes of data
...中略...
0:00:00.652629209 10489      0x11cd580 LOG        typefindfunctions gsttypefindfunctions.c:4310:start_with_type_find: trying to find mime type video/x-ms-asf with the first 16 bytes of data
0:00:00.652668320 10489      0x11cd580 LOG        typefindfunctions gsttypefindfunctions.c:4310:start_with_type_find: trying to find mime type video/x-mve with the first 26 bytes of data
0:00:00.652713926 10489      0x11cd580 LOG        typefindfunctions gsttypefindfunctions.c:4310:start_with_type_find: trying to find mime type application/x-executable with the first 4 bytes of data
0:00:00.652793266 10489      0x11cd580 LOG        typefindfunctions gsttypefindfunctions.c:4310:start_with_type_find: trying to find mime type audio/x-sid with the first 4 bytes of data
0:00:00.660840872 10489      0x11cd580 DEBUG      typefindfunctions gsttypefindfunctions.c:4115:xdgmime_typefind: Got mimetype 'application/x-subrip'
0:00:00.660878027 10489      0x11cd580 LOG        typefindfunctions gsttypefindfunctions.c:4135:xdgmime_typefind: Suggesting 'application/x-subrip' with probability POSSIBLE
/home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt - application/x-subrip
-----例---------------

さらにデバッガでおっかけると、

gst-plugins-base0.10-0.10.36/gst/typefind/gsttypefindfunctions.c
中のxdgmime_typefind()-->g_content_type_guess ()-->_gio_xdg_get_mime_type_for_data()(glib2.0-2.33.12+really2.32.4/./gio/xdgmime/xdgmime.c:470)

だそうな。

で、xdgmime.cとかみるとおもしろいことやってた。
  5秒ごとに/mime/mime.cache,/mime/globs,/mime/magic調べて更新ないかとか
調べてた。更新あったら、キャッシュクリアのようです（$(glib_src)/gio/xdgmime/xdgmime.c xdg_mime_shutdown())

 で、xdg_mime系の関数まわりをstraceでしらべると、
--------------------ここから-------------------
stat("/home/nojima/.local/share//mime/mime.cache", {st_mode=S_IFREG|0644, st_siz
e=360, ...}) = 0
stat("/home/nojima/.local/share//mime/mime.cache", {st_mode=S_IFREG|0644, st_siz
e=360, ...}) = 0
open("/home/nojima/.local/share//mime/mime.cache", O_RDONLY) = 5
fstat(5, {st_mode=S_IFREG|0644, st_size=360, ...}) = 0
mmap(NULL, 360, PROT_READ, MAP_SHARED, 5, 0) = 0x7f94f9479000
close(5)                                = 0
stat("/usr/share/gnome/mime/mime.cache", 0x7fff980f3e20) = -1 ENOENT (No such fi
le or directory)
stat("/usr/share/gnome/mime/globs2", 0x7fff980f3e20) = -1 ENOENT (No such file o
r directory)
stat("/usr/share/gnome/mime/globs", 0x7fff980f3e20) = -1 ENOENT (No such file or
 directory)
stat("/usr/share/gnome/mime/magic", 0x7fff980f3e20) = -1 ENOENT (No such file or
 directory)
open("/usr/share/gnome/mime/aliases", O_RDONLY) = -1 ENOENT (No such file or dir
ectory)
open("/usr/share/gnome/mime/subclasses", O_RDONLY) = -1 ENOENT (No such file or 
directory)
open("/usr/share/gnome/mime/icons", O_RDONLY) = -1 ENOENT (No such file or direc
tory)
open("/usr/share/gnome/mime/generic-icons", O_RDONLY) = -1 ENOENT (No such file 
or directory)
stat("/usr/local/share//mime/mime.cache", 0x7fff980f3e20) = -1 ENOENT (No such f
ile or directory)
stat("/usr/local/share//mime/globs2", 0x7fff980f3e20) = -1 ENOENT (No such file 
or directory)
stat("/usr/local/share//mime/globs", 0x7fff980f3e20) = -1 ENOENT (No such file o
r directory)
stat("/usr/local/share//mime/magic", 0x7fff980f3e20) = -1 ENOENT (No such file o
r directory)
open("/usr/local/share//mime/aliases", O_RDONLY) = -1 ENOENT (No such file or di
rectory)
open("/usr/local/share//mime/subclasses", O_RDONLY) = -1 ENOENT (No such file or
 directory)
open("/usr/local/share//mime/icons", O_RDONLY) = -1 ENOENT (No such file or dire
ctory)
open("/usr/local/share//mime/generic-icons", O_RDONLY) = -1 ENOENT (No such file
 or directory)
stat("/usr/share//mime/mime.cache", {st_mode=S_IFREG|0644, st_size=123160, ...})
 = 0
open("/usr/share//mime/mime.cache", O_RDONLY) = 5
-------------------ここまで---------------------------
こんな感じで調べまくってた。

で、gst-typefindが見つけてくるapplication/x-subripは/usr/share//mime/mime.cache
に入ってた。

で、cache_get_mime_type_for_data()($(glib_src)/gio/xdgmime/xdgmimecahce.c:701)
で、ファイルの中身（おそらく冒頭部）を見てmime-typeを決定しようとしてた。

なんと、cache_get_mime_type_for_dataはmime.cacheをメモリに入れているが、
ここを線形検索してやがりました...

で、多分ここがアヤシーとおもって、調べるとビンゴ!
/usr/share/mime/ find . -type f \! -name 'mime.cache' | xargs fgrep subrip
./packages/freedesktop.org.xml:  <mime-type type="application/x-subrip">
./aliases:application/x-srt application/x-subrip
./globs2:50:application/x-subrip:*.srt
./subclasses:application/x-subrip text/plain
./types:application/x-subrip
バイナリファイル ./magic に一致しました
./globs:application/x-subrip:*.srt
./application/x-subrip.xml:<mime-type xmlns="http://www.freedesktop.org/standards/shared-mime-info" type="application/x-subrip">
./generic-icons:application/x-subrip:text-x-generic

とゆーわけで、/usr/share/mime以下の大量のファイルに定義されている
諸々の形式のmime定義ファイル使って、glibに調べさせてましたな...ごふ。
(glibはもう様々な形式のmime定義を何か使って--->mime.cacheに特定の
バイナリ形式で格納--->で、これを元に調べまくる）

これで、mime-typeは/usr/share/mime以下から調べてたということで、
じゃあ、なんで字幕がでないんじゃ？というのを調べる...

はー、道のりながいぜええええー

もういちどplaybin2のトレースをgst-launch -vで取ると...

------------gst-launchのトレース-----
gst-launch-0.10 -v playbin2 uri=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.ogv suburi=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt
パイプラインを一時停止 (PAUSED) にしています...
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0: ring-buffer-max-size = 0
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0: buffer-size = -1
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0: buffer-duration = -1
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0: use-buffering = FALSE
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0: download = FALSE
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0: uri = "file:///home/nojima/\343\203\223\343\203\207\343\202\252/debconf12/857_Bits_from_the_Release_Team.ogv"
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0: connection-speed = 0
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1: uri = "file:///home/nojima/\343\203\223\343\203\207\343\202\252/debconf12/857_Bits_from_the_Release_Team.srt"
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1: connection-speed = 0
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1: source = (GstFileSrc) source
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1/GstDecodeBin2:decodebin20/GstTypeFindElement:typefind.GstPad:src: caps = application/x-subrip
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0: source = (GstFileSrc) source
/GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin0/GstDecodeBin2:decodebin21/GstTypeFindElement:typefind.GstPad:src: caps = application/x-annodex
Pipeline is PREROLLING ...
Missing element: application/x-subrip デコーダー
WARNING: from element /GstURIDecodeBin:uridecodebin1: タイプ 'application/x-subrip' 用のデコーダーが利用可能ではありません。
追加のデバッグ情報:
gsturidecodebin.c(874): unknown_type_cb (): /GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1
WARNING: from element /GstURIDecodeBin:uridecodebin1/GstDecodeBin2:decodebin20: GStreamerはプラグインを見つけることができません
----------------------------------------------------------------
ちゅーことで、/GstURIDecodeBin:uridecodebin1に無い。

mime-type判定はどうも正しい模様なので、本当にデコーダが無い...
じゃあサポートしている字幕デコーダは？

取り急ぎ、playbin2をデバッグしてみた。
------ここから-------------------w
  env GST_DEBUG=uridecodebin:9 gst-launch-0.10 playbin2 uri=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.ogv suburi=file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt 
パイプラインを一時停止 (PAUSED) にしています...
0:00:00.389141525  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:2546:gst_uri_decode_bin_plugin_init: binding text domain gst-plugins-base-0.10 to locale dir /usr/share/locale
0:00:00.389719531  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1999:setup_source:<uridecodebin1> setup source
0:00:00.389742858  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1207:gen_source_element:<uridecodebin1> finding source for file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.srt
0:00:00.390872679  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1219:gen_source_element:<uridecodebin1> found source type GstFileSrc
0:00:00.390896565  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1222:gen_source_element:<uridecodebin1> source is stream: 0
0:00:00.390912768  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1225:gen_source_element:<uridecodebin1> source needs queue: 0
0:00:00.390973460  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1315:has_all_raw_caps:<source:src> have caps ANY
0:00:00.390998952  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:2070:setup_source:<uridecodebin1> Plugging decodebin to source
0:00:00.391015156  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1627:make_decoder:<uridecodebin1> making new decodebin2
0:00:00.391904724  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1697:make_decoder:<uridecodebin1> have 1 pending dynamic objects
0:00:00.460152932  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1555:proxy_autoplug_continue_signal:<uridecodebin1> autoplug-continue returned 1
0:00:00.460359593  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:313:gst_uri_decode_bin_autoplug_factories:<uridecodebin1> finding factories
0:00:00.466184143  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:335:gst_uri_decode_bin_autoplug_factories:<uridecodebin1> autoplug-factories returns 0x14cf860
0:00:00.466247140  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1570:proxy_autoplug_factories_signal:<uridecodebin1> autoplug-factories returned 0x14cf900
0:00:00.487631425  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1539:proxy_unknown_type_signal:<uridecodebin1> unknown-type signaled
0:00:00.487691628  8419      0x148eb00 WARN            uridecodebin gsturidecodebin.c:874:unknown_type_cb:<uridecodebin1> warning: タイプ 'application/x-subrip' 用のデコーダーが利用可能ではありません。
0:00:00.488366644  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:2504:gst_uri_decode_bin_change_state: ready to paused
0:00:00.488408758  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1999:setup_source:<uridecodebin0> setup source
0:00:00.488429641  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1207:gen_source_element:<uridecodebin0> finding source for file:///home/nojima/ビデオ/debconf12/857_Bits_from_the_Release_Team.ogv
0:00:00.488807273  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1219:gen_source_element:<uridecodebin0> found source type GstFileSrc
0:00:00.488831298  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1222:gen_source_element:<uridecodebin0> source is stream: 0
0:00:00.488849946  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1225:gen_source_element:<uridecodebin0> source needs queue: 0
0:00:00.488940600  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1315:has_all_raw_caps:<source:src> have caps ANY
0:00:00.488967279  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:2070:setup_source:<uridecodebin0> Plugging decodebin to source
0:00:00.488986765  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1627:make_decoder:<uridecodebin0> making new decodebin2
0:00:00.489445832  8419      0x148eb00 LOG             uridecodebin gsturidecodebin.c:1697:make_decoder:<uridecodebin0> have 1 pending dynamic objects
0:00:00.545765004  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1555:proxy_autoplug_continue_signal:<uridecodebin0> autoplug-continue returned 1
0:00:00.548375671  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1570:proxy_autoplug_factories_signal:<uridecodebin0> autoplug-factories returned 0x14d6160
0:00:00.548436154  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1585:proxy_autoplug_sort_signal:<uridecodebin0> autoplug-sort returned (nil)
0:00:00.548608103  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:1600:proxy_autoplug_select_signal:<uridecodebin0> autoplug-select returned 0
0:00:00.630184329  8419      0x148eb00 DEBUG           uridecodebin gsturidecodebin.c:2504:gst_uri_decode_bin_change_state: ready to paused
Pipeline is PREROLLING ...
Missing element: application/x-subrip デコーダー
WARNING: from element /GstURIDecodeBin:uridecodebin1: タイプ 'application/x-subrip' 用のデコーダーが利用可能ではありません。
追加のデバッグ情報:
gsturidecodebin.c(874): unknown_type_cb (): /GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1
WARNING: from element /GstURIDecodeBin:uridecodebin1/GstDecodeBin2:decodebin20: GStreamerはプラグインを見つけることができません
追加のデバッグ情報:
gstdecodebin2.c(3576): gst_decode_bin_expose (): /GstPlayBin2:playbin20/GstURIDecodeBin:uridecodebin1/GstDecodeBin2:decodebin20:
no suitable plugins found
0:00:00.647458873  8419      0x160aad0 DEBUG           uridecodebin gsturidecodebin.c:1555:proxy_autoplug_continue_signal:<uridecodebin0> autoplug-continue returned 1
0:00:00.648065794  8419      0x160aad0 DEBUG           uridecodebin gsturidecodebin.c:1570:proxy_autoplug_factories_signal:<uridecodebin0> autoplug-factories returned 0x14d7300
0:00:00.648129908  8419      0x160aad0 DEBUG           uridecodebin gsturidecodebin.c:1585:proxy_autoplug_sort_signal:<uridecodebin0> autoplug-sort returned (nil)
...中略...
------ここまで-------------------w

どうも、gst-plugins-base0.10にて、
gst/subparse/gstsubparse.cにて、capabilityとして、
application/x-subtitle; application/x-subtitle-dks; "
     "application/x-subtitle-tmplayer; application/x-subtitle-mpl2; "
     "application/x-subtitle-qttext

text/plain; text/x-pango-markup

あたりがありそうなので、取り急ぎ、
x-subtitle-tmplayer
にひっかかりそうな感じにしてみる。

結局、試行錯誤の上、

  /usr/share/mimeにはmpsub形式のmimeがあり、
　gst-plugins-base0.10にはmpsub形式のパーサがあったので、
　--------------フォーマット------------
FORMAT=TIME

15 3
こんにちわ

0 3
これはテストです

0 3
ナバホは攻撃をうけてましたー
　--------------フォーマット------------
というファイルをXXXX.subという拡張子で保存すると日本語でるでる。

※FORMAT=TIMEと拡張子.subは/usr/share/mime以下のファイルで推定要件として
指定されている。

まあ、素直に
http://wiki.debian.org/Multimedia/Subtitle
みてツールで書けよ。

gst-inspect playbin2とか、
gst-inspect subparseとか
するといろいろわかって楽しいかも。

gstreamerは

 coreelementsとして最初にbin/pipelineを登録

 pluginはgst_element_register()でがんばるっぽい

GstPlugin pluginは、gst_plugin_register_static()で作成。

しらんかったが、sidあたりから、

Glibについては、
aptitude install *-dbg
を突っ込み、さらに、
set substitute-path /tmp/buildd/glib2.0-2.33.12+really2.32.4/ /home/nojima/prog/debian/libglib/glib2.0-2.33.12+really2.32.4/
としておくと、そのままソースコードデバッグが可能。




