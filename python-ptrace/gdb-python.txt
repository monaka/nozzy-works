>gdbのpython拡張もすげー

 1 $(SRC)/gdb/python以下にc言語で全力実装したpythonライブラリ本体がある。
　　なので、$(SRC)/gdb/python/lib/以下の.pyスクリプトはgdb本体に内臓
　　されているpython環境を拡張したもののみ。

 2. gdbは、python拡張を利用するために、$(SRC)/gdb/python/python.c中の
　　_initialize_python()を実行。こうすると、gdb内部でpython処理系
　　が実行されている状態になる。なお、pythonのgdbモジュールはこの時に
    モジュールとしてロード登録されたのと等価になる
　　　（モジュール本体もgdbのバイナリ中に実装済み）

3. ./gdb/python/python.cのGdbMethodsにgdbモジュールの内部メソッド
　が定義されている。

4. どこまで処理系として利用できるか試しに遊んでみる

(gdb) python
>import os
>print os.environ
>[ctrl+D]
{'PERL_MM_OPT': 'INSTALL_BASE=/home/nojima/perl5', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'GJS_DEBUG_OUTPUT': 'stderr', 'LINES': '58', 'PERL_LOCAL_LIB_ROOT': '/home/nojima/perl5', 'QT_IM_MODULE': 'uim', 'LOGNAME': 'nojima', 'WINDOWID': '35651589', 'PATH': '/home/nojima/perl5/bin:/home/nojima/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games', 'GNOME_KEYRING_CONTROL': '/home/nojima/.cache/keyring-vN0u12', 'DEBFULLNAME': 'Takahide Nojima', 'DISPLAY': ':0', 'SSH_AGENT_PID': '3736', 'LANG': 'ja_JP.utf8', 'TERM': 'xterm', 'SHELL': '/bin/zsh', 'XAUTHORITY': '/var/run/gdm3/auth-for-nojima-oXZIP7/database', 'SESSION_MANAGER': 'local/nightmare:@/tmp/.ICE-unix/3685,unix/nightmare:/tmp/.ICE-unix/3685', 'XDG_DATA_DIRS': '/usr/share/gnome:/usr/local/share/:/usr/share/', 'WINDOWPATH': '7', 'EDITOR': '/usr/bin/vi', 'XMODIFIERS': '@im=uim', 'QUILT_PATCHES': 'debian/patches', 'GPG_AGENT_INFO': '/home/nojima/.cache/keyring-vN0u12/gpg:0:1', 'HOME': '/home/nojima', 'USERNAME': 'nojima', 'QUILT_REFRESH_ARGS': '-p ab --no-timestamps --no-index', 'PERL_MB_OPT': '--install_base /home/nojima/perl5', 'PERL5LIB': '/home/nojima/perl5/lib/perl5/x86_64-linux-gnu-thread-multi:/home/nojima/perl5/lib/perl5', 'SSH_AUTH_SOCK': '/home/nojima/.cache/keyring-vN0u12/ssh', 'GDMSESSION': 'gnome', 'COLUMNS': '80', 'DBUS_SESSION_BUS_ADDRESS': 'unix:abstract=/tmp/dbus-e0ocDnwoAG,guid=38b5c51cefe8a2acce74588350a5d019', '_': '/usr/bin/gdb', 'XDG_SESSION_COOKIE': '9c90623ed4d5890e0fa845d30000000d-1353043990.955697-864603684', 'GTK_IM_MODULE': 'uim', 'DESKTOP_SESSION': 'gnome', 'DEBEMAIL': 'nozzy123nozzy@gmail.com', 'GNOME_KEYRING_PID': '3667', 'PERL5OPT': '-I/home/nojima/perl5/include', 'OLDPWD': '/home/nojima/prog/debian/gdb', 'GDM_LANG': 'ja_JP.utf8', 'SHLVL': '1', 'PWD': '/home/nojima', 'COLORTERM': 'gnome-terminal', 'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'USER': 'nojima'}

(gdb) python
>import gdb
>print gdb.history
><built-in function history>
(gdb) python
>import gdb
>print gdb.breakpoints()
[ctrl+D]
>None
(gdb)

$ gdb --args /bin/ls
...
(gdb) python
>import gdb
>print gdb.objfiles()
>[<gdb.Objfile object at 0x7f3a1cf2b130>]
(gdb)

$pwd
/home/nojima/prog/gdb-python
~/prog/gdb-python/ cat gdb-hello.py 
class HelloWorld (gdb.Command):
  """ Greet the whole world """
  def __init__ (self):
     super(HelloWorld, self).__init__ ("hello-world",gdb.COMMAND_OBSCURE)

  def invoke (self,arg, from_tty):
     print "Hello, World!"

HelloWorld()

$gdb
> source gdb-hello.py
> hello-world
Hello, World!
>

5. 取り急ぎpythonのバージョン調べてみる。
$gdb 
(gdb) python
>import sys
>print sys.version_info
>sys.version_info(major=2, minor=7, micro=3, releaselevel='final', serial=0)
(gdb) 

というわけで、python-2.7.3の処理系

ついでに、サーチパスを調べる
gdb
(gdb) python print sys.path
['/usr/share/gdb/python', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-linux2', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages/PIL', '/usr/lib/python2.7/dist-packages/gst-0.10', '/usr/lib/python2.7/dist-packages/gtk-2.0', '/usr/lib/pymodules/python2.7']

6. 基本ポリシーとして、ユーザが独自拡張したい場合は、gdb.*を継承して、何かするのが流儀のような気がする。
（もちろん、def発行しまくって手続き系で組むこともできるが...)

7.とりあえず、どんなシンボルあるかなー

BASICなやり方
(gdb) python print dir(gdb)
['ARCH_FRAME', 'BP_ACCESS_WATCHPOINT', 'BP_BREAKPOINT', 'BP_HARDWARE_WATCHPOINT', 'BP_NONE', 'BP_READ_WATCHPOINT', 'BP_WATCHPOINT', 'Block', 'BlockIterator', 'Breakpoint', 'BreakpointEvent', 'COMMAND_BREAKPOINTS', 'COMMAND_DATA', 'COMMAND_FILES', 'COMMAND_MAINTENANCE', 'COMMAND_NONE', 'COMMAND_OBSCURE', 'COMMAND_RUNNING', 'COMMAND_STACK', 'COMMAND_STATUS', 'COMMAND_SUPPORT', 'COMMAND_TRACEPOINTS', 'COMPLETE_COMMAND', 'COMPLETE_FILENAME', 'COMPLETE_LOCATION', 'COMPLETE_NONE', 'COMPLETE_SYMBOL', 'Command', 'ContinueEvent', 'DUMMY_FRAME', 'Event', 'EventRegistry', 'ExitedEvent', 'FRAME_UNWIND_INNER_ID', 'FRAME_UNWIND_NO_REASON', 'FRAME_UNWIND_NO_SAVED_PC', 'FRAME_UNWIND_NULL_ID', 'FRAME_UNWIND_OUTERMOST', 'FRAME_UNWIND_SAME_ID', 'FRAME_UNWIND_UNAVAILABLE', 'Field', 'FinishBreakpoint', 'Frame', 'Function', 'GdbError', 'HOST_CONFIG', 'INLINE_FRAME', 'Inferior', 'InferiorThread', 'Membuf', 'MemoryError', 'NORMAL_FRAME', 'NewObjFileEvent', 'Objfile', 'PARAM_AUTO_BOOLEAN', 'PARAM_BOOLEAN', 'PARAM_ENUM', 'PARAM_FILENAME', 'PARAM_INTEGER', 'PARAM_OPTIONAL_FILENAME', 'PARAM_STRING', 'PARAM_STRING_NOESCAPE', 'PARAM_UINTEGER', 'PARAM_ZINTEGER', 'PYTHONDIR', 'Parameter', 'Progspace', 'SENTINEL_FRAME', 'SIGTRAMP_FRAME', 'STDERR', 'STDLOG', 'STDOUT', 'SYMBOL_FUNCTIONS_DOMAIN', 'SYMBOL_LABEL_DOMAIN', 'SYMBOL_LOC_ARG', 'SYMBOL_LOC_BLOCK', 'SYMBOL_LOC_COMPUTED', 'SYMBOL_LOC_CONST', 'SYMBOL_LOC_CONST_BYTES', 'SYMBOL_LOC_LABEL', 'SYMBOL_LOC_LOCAL', 'SYMBOL_LOC_OPTIMIZED_OUT', 'SYMBOL_LOC_REF_ARG', 'SYMBOL_LOC_REGISTER', 'SYMBOL_LOC_REGPARM_ADDR', 'SYMBOL_LOC_STATIC', 'SYMBOL_LOC_TYPEDEF', 'SYMBOL_LOC_UNDEF', 'SYMBOL_LOC_UNRESOLVED', 'SYMBOL_STRUCT_DOMAIN', 'SYMBOL_TYPES_DOMAIN', 'SYMBOL_UNDEF_DOMAIN', 'SYMBOL_VARIABLES_DOMAIN', 'SYMBOL_VAR_DOMAIN', 'SignalEvent', 'StopEvent', 'Symbol', 'Symtab', 'Symtab_and_line', 'TAILCALL_FRAME', 'TARGET_CONFIG', 'TYPE_CODE_ARRAY', 'TYPE_CODE_BITSTRING', 'TYPE_CODE_BOOL', 'TYPE_CODE_CHAR', 'TYPE_CODE_COMPLEX', 'TYPE_CODE_DECFLOAT', 'TYPE_CODE_ENUM', 'TYPE_CODE_ERROR', 'TYPE_CODE_FLAGS', 'TYPE_CODE_FLT', 'TYPE_CODE_FUNC', 'TYPE_CODE_INT', 'TYPE_CODE_INTERNAL_FUNCTION', 'TYPE_CODE_MEMBERPTR', 'TYPE_CODE_METHOD', 'TYPE_CODE_METHODPTR', 'TYPE_CODE_NAMESPACE', 'TYPE_CODE_PTR', 'TYPE_CODE_RANGE', 'TYPE_CODE_REF', 'TYPE_CODE_SET', 'TYPE_CODE_STRING', 'TYPE_CODE_STRUCT', 'TYPE_CODE_TYPEDEF', 'TYPE_CODE_UNION', 'TYPE_CODE_VOID', 'ThreadEvent', 'Type', 'TypeIterator', 'VERSION', 'Value', 'WP_ACCESS', 'WP_READ', 'WP_WRITE', '__doc__', '__name__', '__package__', '__path__', 'block_for_pc', 'breakpoints', 'command', 'current_objfile', 'current_progspace', 'decode_line', 'default_visualizer', 'error', 'events', 'execute', 'flush', 'frame_stop_reason_string', 'history', 'inferiors', 'lookup_global_symbol', 'lookup_symbol', 'lookup_type', 'newest_frame', 'objfiles', 'parameter', 'parse_and_eval', 'post_event', 'pretty_printers', 'progspaces', 'prompt', 'selected_frame', 'selected_inferior', 'selected_thread', 'solib_name', 'string_to_argv', 'target_charset', 'target_wide_charset', 'write']

# dir()については、python2.7.3のチュートリ6.3章参照

(gdb) python
>import gdb
>import inspect
>print inspect.getmembers(gdb.Symtab_and_line)
>[('__class__', <type 'type'>), ('__delattr__', <slot wrapper '__delattr__' of 'object' objects>), ('__doc__', 'GDB symtab_and_line object'), ('__format__', <method '__format__' of 'object' objects>), ('__getattribute__', <slot wrapper '__getattribute__' of 'object' objects>), ('__hash__', <slot wrapper '__hash__' of 'object' objects>), ('__init__', <slot wrapper '__init__' of 'object' objects>), ('__new__', <built-in method __new__ of type object at 0xb964c0>), ('__reduce__', <method '__reduce__' of 'object' objects>), ('__reduce_ex__', <method '__reduce_ex__' of 'object' objects>), ('__repr__', <slot wrapper '__repr__' of 'object' objects>), ('__setattr__', <slot wrapper '__setattr__' of 'object' objects>), ('__sizeof__', <method '__sizeof__' of 'object' objects>), ('__str__', <slot wrapper '__str__' of 'gdb.Symtab_and_line' objects>), ('__subclasshook__', <built-in method __subclasshook__ of type object at 0xb964c0>), ('is_valid', <method 'is_valid' of 'gdb.Symtab_and_line' objects>), ('line', <attribute 'line' of 'gdb.Symtab_and_line' objects>), ('pc', <attribute 'pc' of 'gdb.Symtab_and_line' objects>), ('symtab', <attribute 'symtab' of 'gdb.Symtab_and_line' objects>)]

とのこと。

8. なんかよーわからんが、os.path.append()しても、import構文のサーチパスに反映しない
とゆー現象が発生して、/usr/games/renpyまでは動かんかった。
(理由は不明）
--->execfile()では、素のpythonでも同じ現象で動かんかった。

9. gdbのpython拡張について、各classの説明読みたいなら、次のようにすると読める。

  (gdb) python help(gdb)



10 いっそのことpythonすくりぷとにしちゃえ

  #!/home/YOURNAME/archer/install/bin/gdb -P
  print "hello from python"


See.   http://tromey.com/blog/?p=548

11. tutorial/wiki

http://sourceware.org/gdb/wiki/PythonGdb

http://sourceware.org/gdb/wiki/PythonGdbTutorial
※関係者なのか？？

12. gdb.Frameオブジェクト使ってみた。

~/prog/gdb-python/ gdb /bin/ls               
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /bin/ls...(no debugging symbols found)...done.
(gdb) b opendir
Breakpoint 1 at 0x4024a0
(gdb) run
Starting program: /bin/ls 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, 0x00007ffff74c9be0 in opendir ()
   from /lib/x86_64-linux-gnu/libc.so.6
(gdb) python print gdb.newest_frame()
{stack=0x7fffffffe150,code=0x7ffff74c9be0,!special}
(gdb) python
>import inspect
>a=gdb.newest_frame()
>print inspect(a)
>Traceback (most recent call last):
  File "<string>", line 3, in <module>
TypeError: 'module' object is not callable
Error while executing Python code.
(gdb) python
>import inspect
>a=gdb.newest_frame()
>print inspect.getmembers(a)
>[('__class__', <type 'gdb.Frame'>), ('__delattr__', <method-wrapper '__delattr__' of gdb.Frame object at 0x7f0df52d8130>), ('__doc__', 'GDB frame object'), ('__eq__', <method-wrapper '__eq__' of gdb.Frame object at 0x7f0df52d8130>), ('__format__', <built-in method __format__ of gdb.Frame object at 0x7f0df52d8130>), ('__ge__', <method-wrapper '__ge__' of gdb.Frame object at 0x7f0df52d8130>), ('__getattribute__', <method-wrapper '__getattribute__' of gdb.Frame object at 0x7f0df52d8130>), ('__gt__', <method-wrapper '__gt__' of gdb.Frame object at 0x7f0df52d8130>), ('__hash__', <method-wrapper '__hash__' of gdb.Frame object at 0x7f0df52d8130>), ('__init__', <method-wrapper '__init__' of gdb.Frame object at 0x7f0df52d8130>), ('__le__', <method-wrapper '__le__' of gdb.Frame object at 0x7f0df52d8130>), ('__lt__', <method-wrapper '__lt__' of gdb.Frame object at 0x7f0df52d8130>), ('__ne__', <method-wrapper '__ne__' of gdb.Frame object at 0x7f0df52d8130>), ('__new__', <built-in method __new__ of type object at 0xb943a0>), ('__reduce__', <built-in method __reduce__ of gdb.Frame object at 0x7f0df52d8130>), ('__reduce_ex__', <built-in method __reduce_ex__ of gdb.Frame object at 0x7f0df52d8130>), ('__repr__', <method-wrapper '__repr__' of gdb.Frame object at 0x7f0df52d8130>), ('__setattr__', <method-wrapper '__setattr__' of gdb.Frame object at 0x7f0df52d8130>), ('__sizeof__', <built-in method __sizeof__ of gdb.Frame object at 0x7f0df52d8130>), ('__str__', <method-wrapper '__str__' of gdb.Frame object at 0x7f0df52d8130>), ('__subclasshook__', <built-in method __subclasshook__ of type object at 0xb943a0>), ('block', <built-in method block of gdb.Frame object at 0x7f0df52d8130>), ('find_sal', <built-in method find_sal of gdb.Frame object at 0x7f0df52d8130>), ('function', <built-in method function of gdb.Frame object at 0x7f0df52d8130>), ('is_valid', <built-in method is_valid of gdb.Frame object at 0x7f0df52d8130>), ('name', <built-in method name of gdb.Frame object at 0x7f0df52d8130>), ('newer', <built-in method newer of gdb.Frame object at 0x7f0df52d8130>), ('older', <built-in method older of gdb.Frame object at 0x7f0df52d8130>), ('pc', <built-in method pc of gdb.Frame object at 0x7f0df52d8130>), ('read_var', <built-in method read_var of gdb.Frame object at 0x7f0df52d8130>), ('select', <built-in method select of gdb.Frame object at 0x7f0df52d8130>), ('type', <built-in method type of gdb.Frame object at 0x7f0df52d8130>), ('unwind_stop_reason', <built-in method unwind_stop_reason of gdb.Frame object at 0x7f0df52d8130>)]

んでもって、gdb.Frameオブジェクトで遊ぶと次のとおり、

(gdb) bt
#0  0x00007ffff74c9be0 in opendir () from /lib/x86_64-linux-gnu/libc.so.6
#1  0x00000000004035e7 in ?? ()
#2  0x00007ffff7440ead in __libc_start_main ()
   from /lib/x86_64-linux-gnu/libc.so.6
#3  0x00000000004048a9 in ?? ()
#4  0x00007fffffffe6a8 in ?? ()
#5  0x000000000000001c in ?? ()
#6  0x0000000000000001 in ?? ()
#7  0x00007fffffffe99c in ?? ()
#8  0x0000000000000000 in ?? ()
(gdb) python
>a=gdb.newest_frame()
>print a.pc
><built-in method pc of gdb.Frame object at 0x7f0df52d8170>
(gdb) python
>a=gdb.newest_frame()
>print a.pc()
>140737342381024
(gdb) python
>a=gdb.newest_frame()
>print "addr=%x" % (a.pc())
>addr=7ffff74c9be0
(gdb) python
>a=gdb.newest_frame()
>print (a.name())
>opendir
(gdb) python
>a=gdb.newest_frame()
>b=a.next()
>print (b.name())
>Traceback (most recent call last):
  File "<string>", line 2, in <module>
AttributeError: 'gdb.Frame' object has no attribute 'next'
Error while executing Python code.
(gdb) python
>a=gdb.newest_frame()
>b=a.older()
>print (b.name())
>None
(gdb) python
>a=gdb.newest_frame()
>b=a.older()
>b=a.newer()
>print (b.name())
>Traceback (most recent call last):
  File "<string>", line 4, in <module>
AttributeError: 'NoneType' object has no attribute 'name'
Error while executing Python code.
(gdb) python
>a=gdb.newest_frame()
>b=a.newer()
>print (b.name())
>Traceback (most recent call last):
  File "<string>", line 3, in <module>
AttributeError: 'NoneType' object has no attribute 'name'
Error while executing Python code.
(gdb) python
>a=gdb.newest_frame()
>b=a.older()
>a=b.older()
>print (a.name())
>__libc_start_main

13. gdb.Frame.older/newerで行ったり来たりできる。

14. gdbのマニュアルから引き抜いた、実装済みのpython class

    class Block(__builtin__.object)
    class BlockIterator(__builtin__.object)
    class Breakpoint(__builtin__.object)
    class BreakpointEvent(StopEvent)
    class Command(__builtin__.object)
    class ContinueEvent(ThreadEvent)
    class Event(__builtin__.object)
    class EventRegistry(__builtin__.object)
    class ExitedEvent(Event)
    class Field(__builtin__.object)
    class FinishBreakpoint(Breakpoint)
    class Frame(__builtin__.object)
    class Function(__builtin__.object)
    class GdbError(exceptions.Exception)
    class Inferior(__builtin__.object)
    class InferiorThread(__builtin__.object)
    class Membuf(__builtin__.object)
    class MemoryError(error)
    class NewObjFileEvent(Event)
    class Objfile(__builtin__.object)
    class Parameter(__builtin__.object)
    class Progspace(__builtin__.object)
    class SignalEvent(StopEvent)
    class StopEvent(ThreadEvent)
    class Symbol(__builtin__.object)
    class Symtab(__builtin__.object)
    class Symtab_and_line(__builtin__.object)
    class ThreadEvent(Event)
    class Type(__builtin__.object)
    class TypeIterator(__builtin__.object)
    class Value(__builtin__.object)
    class error(exceptions.RuntimeError)

15. http://tromey.com/blog/?p=515
の例によれば、gdb.Function使うと、
(gdb) break function if $caller_is("main")
のように、pythonで書いたfunctionを利用して
breakの条件とかに利用可能。
(gdb.Functionの使い方はinfo gdb参照)

16. symbolとかsymtabとかあるので、しらべたら、

    symbolオブジェクトは、
      gdb.lookup_global_symbol
      gdb.lookup_symbol
    により、指定されたname,domainを元に
　　それを含むシンボルテーブル中のシンボル情報
　　を引き抜くときに、返却用に利用されるオブジェクト

   そもそも、gdbは内部構造からいって、
　とある名前、block,domainから、symbolテーブルを引く
　ことに特化した実装になっているので、symbolテーブルの
　中身を全部引き抜くのには向いていない?

17. salという変数名とかは、symbol_and_lineの略っぽいぞ。
    gdbの内部にそういうデータ構造があるらしい？コードのコメントによると。
    get_current_source_symtab_and_line
    などからどうもpython拡張側は情報を頂くらしい。（gdb/python.cとか）

18. GDB_PY_HANDLE_EXCEPTION()とかでpython側のexceptionへつなげる模様。

19. gdb.PYTHONDIRってどこも使ってない...
   (値は代入されるんですけど、参照しているものが居ない...)

20. gdb python拡張の使い方サンプルは
　　　$(GDB_SOURCE)/gdb/testsuite/gdb.python/*.py
   を参考にするのが良い。

　　結構充実。

21. 以下のtopicで説明した方がよいかも？

 　　Topic 1. gdb搭載のpythonの能力について

         versionは2.7.3
         script pathの再定義できない
　　　　　pydocのテスト

 　　Topic 2. gdb python拡張攻略方法

　　　　　以下の順番で。

　　　　　特徴：そもそも情報が少ない
　　　　　python拡張の目的：gdbのマクロがいろいろ足りんかったので、
　　　　　　　　　　　　　　いっそのことpython積んでいろいろしたかったらしい。

　　　　　攻略のステップ：

　　　　　1. まずgdb.infoのextension pythonあたりを読む
　　　　　2. http://sourceware.org/gdb/wiki/PythonGdb
            http://sourceware.org/gdb/wiki/PythonGdbTutorial
            を読む
　　　　　3. $(GDB_SOURCE)/gdb/testsuite/gdb.python
            以下を読む

　　  Topic 3. gdbモジュールのclass図

　　　Topic 4. gdb pythonの
         gdb pythonの内部構造

　　　Topic 5. hello worldコマンド拡張

         まずはコマンド拡張の基礎から
　　　　　
     Topic 6. 変数の値のとり方

　　　　　gdb.Value()を使うには。

     Topic 6. functionについて

　　　　　特定条件を搦めてbreakpointから。

　　　Topic 7. eventsについて

         gdb.BreakPoints
         
　　　　　signal/break/finishbreakについて

     Topic 8. frameについて

　　　　　駆け上がろうぜ！stack frame！

　　　Topic 9. prettyprintについて

　　　　　データ構造わかってるんならこちら。

     Topic 10. シンボル扱いについて

　　　　　gdbにおねがいー

　　　Topic 11. auto-loding scripts

        1. 右斜め上の展開ではあるが、
　　　　　　binary中に.debug_gdb_scripts
         というセクションを持ち、ここにロードすべきpythonスクリプトを
　　　　　入れたobjectfileを用意して、
          set auto-load-scripts yes
         とかをgdbに指定すると、こちらが評価されて自動でpythonスクリプト
　　　　　がロードされる。

         2. OBJECTFILE-gdb.pyファイルをカレントディレクトリとか
　　　　　　　に用意すると、OBJECTFILEをロードすると、自動で吸い込まれる。

       ※ええ、わかってますとも。これは使い方誤るとでっかいセキュリティホールっす。
        しかも、defaultで有効だし！

　　　Topic 12.　pythonスクリプトとして 

　　　　　いつも面倒だろ？

     Topic 13. block/inferiorその他

　　　　　たくさんプログラムを一度にデバッグするなら。

     Topic 14. v7.5とv7.4のpython拡張の違い

      若干のfunction追加、__dict__の追加等
      gdb/doc/gdb.texiの差分は
         (1) gdb.Valueのあたり
　　　　　(1)auto-loadの所ぐらいか。
　　　あと、gdb.COMMAND_OBSCURE→ gdb.COMMAND_USERへ変更あり。
　　　一応、gdb.find_pc_lineとかも載ってる。


     入れる事：

　　　　打倒DTraceユーザランド


22. auto-loading scripts

  以下のテストを行う。

   hello.c:

/* elf形式にあわせ、.debug_gdb_scriptsというセクションをオブジェクトにねじ込む */
 asm(
".pushsection \".debug_gdb_scripts\",\"MS\",@progbits,1\n"
".byte 1\n"
".asciz \"hello-world.py\"\n"
".popsection \n"
);

 んで、カレントディレクトリ(gdb-7.4.1の場合w)に

ls -l
~/prog/my-works/gdb-python/hello-world-auto/ ls -la
合計 28
drwxr-xr-x 2 nojima nojima 4096  1月  3 17:56 ./
drwxr-xr-x 3 nojima nojima 4096  1月  3 17:15 ../
-rw-r--r-- 1 nojima nojima   96  1月  3 17:18 Makefile
-rwxr-xr-x 1 nojima nojima 8276  1月  3 17:46 hello*
lrwxrwxrwx 1 nojima nojima   15  1月  3 17:56 hello-world.py -> ../gdb-hello.py
-rw-r--r-- 1 nojima nojima  206  1月  3 17:46 hello.c

 とか用意して、

gdb ./hello 
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/nojima/prog/my-works/gdb-python/hello-world-auto/hello...done.
(gdb) show auto-
auto-load-scripts  auto-solib-add     
(gdb) info auto-load-scripts 
Loaded  Script                                                                 
Yes     hello-world.py                                                         
	full name: /home/nojima/prog/my-works/gdb-python/hello-world-auto/hello-world.py
(gdb) hello-world 
Hello, World!
(gdb) quit

の通り、勝手にhello-world.pyが吸い込まれる

取り急ぎ、hello-gdb.pyの実験

prog/my-works/gdb-python/hello-world-auto2/ ls -l
合計 16
-rw-r--r-- 1 nojima nojima   96  1月  3 18:42 Makefile
-rwxr-xr-x 1 nojima nojima 8156  1月  3 18:43 hello*
lrwxrwxrwx 1 nojima nojima   15  1月  3 18:42 hello-gdb.py -> ../gdb-hello.py
-rw-r--r-- 1 nojima nojima   79  1月  3 18:43 hello.c
~/prog/my-works/gdb-python/hello-world-auto2/ gdb ./hello 
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/nojima/prog/my-works/gdb-python/hello-world-auto2/hello...done.
(gdb) info auto-load-scripts 
Loaded  Script                                                                 
Yes     /home/nojima/prog/my-works/gdb-python/hello-world-auto2/hello-gdb.py   
(gdb) hello-world 
Hello, World!
(gdb) quit

ってな具合に、勝手にhello-gdb.pyがロードされる。

もちろんだが、いつも使うようなものは、
$(HOME)/.gdbinitに
source /foo/bar/my-gdb-func.py

とか入れておくとgdbが起動時にいつも吸い込まれる。

23. gdb.functionの例：

~/prog/my-works/gdb-python/test-function/ gdb ./chkfunc
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/nojima/prog/my-works/gdb-python/test-function/chkfunc...done.
(gdb) break foo_a if $caller_is("caller_bar")
Breakpoint 1 at 0x400518: file chkfunc.c, line 12.
(gdb) run
Starting program: /home/nojima/prog/my-works/gdb-python/test-function/chkfunc 
caller is main!

Breakpoint 1, foo_a (str=0x40060c "caller is bar!") at chkfunc.c:12
12		printf("%s\n",str);
(gdb) quit
A debugging session is active.

	Inferior 1 [process 5334] will be killed.

Quit anyway? (y or n) y

24. なぜか、pydocにはgdb.LazyString classの説明が出てこない。

25. くそっ、gdbはデバッグシンボル無しのバイナリには無力?
　　Jumpテーブルにはシンボル定義されているのに、シンボルが見つからん...
   ※特にfoo@plt系が無力なようにみえるぜ。

26. rbreakは確かにシンボル全部にbreakできそうだが、どこのシンボル読んでるんだ?
    -> $SRC/gdb/symtab.cにrbreakの実装がある。
    -> search_symbols()を使って調べるっぽい
   (実装内容が、pythonのgdb.lookup_global_symbol()と若干違う...)     

27. gdb.lookup_global_symbol()では、

　　　 $(SRC)/gdb/symtab.c中のlookup_symbol_global()で探す。
　　　 -->
        Step1.  $(SRC)/gdb/solib.c中のsolib_global_lookupでライブラリ中の
　　　　　　     グローバルシンボルを探し、
　　　　 Step2. なければ、$(SRC)/gdb/symtab.c中のlookup_symbol_aux_symtabs()で
　　　　　　　　　$(SRC)/gdb/symtab.c中のlookup_block_symbolで探す


28. gdb.value()の使い方が...本当か?これは？

     gdb-value.expみると、

　　　Step1. コマンド実行（この時値がprintされるようにする）
  　　Step2. 直後、gdb.history(0)の値をgdb.valueでひろう。
     Step3. Step2.で得られたデータを元に操作をかける。


    まあ、Step1〜Step2は、gdb.parse_and_eval()あたりで手に入る。
     
class CheckStr(gdb.Command):
        """ gdb.value checking """
        def __init__(self):
                super(CheckStr,self).__init__("checkstr",gdb.COMMAND_OBSCURE)
        def invoke (self,arg, from_tty):
                str_arg_val=gdb.parse_and_eval("str");
                print "str="+str_arg_val.string();

CheckStr()


 しておき、
(gdb) list foo_a
6	".asciz \"test-func.py\"\n"
7	".popsection \n"
8	);
9	
10	void foo_a(const char *str)
11	{
12		printf("%s\n",str);
13	
14	}

な場所で

(gdb) b foo_a
Breakpoint 1 at 0x400518: file chkfunc.c, line 12.
(gdb) run
Starting program: /home/nojima/prog/my-works/gdb-python/test-function/chkfunc 

Breakpoint 1, foo_a (str=0x40061b "caller is main!") at chkfunc.c:12
12		printf("%s\n",str);
(gdb) checkstr 
str=caller is main!

となる。

    なお、parse_and_evalは変数専用なので、注意が必要。

29.gdb.decode_line(arg)は

　　argに入れた文字列を、LINESPECと、その他文字列に分解し、
　　(remain,locations)のTupleにして返却。

　　とにかく、LINESPECに該当するような文字列は強制的に
　　LINESPECとして扱われる。

　　さらにlocationsは、gdb.Symtab_and_lineオブジェクトの
　　Tupleとなる。
　　locations=(location,localtion,location,...)こんな感じ。
    なので、locationsについて何かしたければ、
    for loc in locations:
         ...do about loc...

    にする必要有り。

30 取り急ぎ、gdb.Breakpointsにてサンプルは_LPrintfCommand()
~/prog/my-works/gdb-python/test-function/ gdb ./chkfunc
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/nojima/prog/my-works/gdb-python/test-function/chkfunc...done.
(gdb) lprintf foo_a,"str=%s",str
_LPrintfCommmand arg=foo_a,"str=%s",str
_LPrintfCommmand remaining="str=%s",str locations=symbol and line for chkfunc.c, line 11
Breakpoint 1 at 0x400518: file chkfunc.c, line 12.
(gdb) run
Starting program: /home/nojima/prog/my-works/gdb-python/test-function/chkfunc 
caller is main!
caller is bar!
str=caller is main!str=caller is bar![Inferior 1 (process 5323) exited normally]
(gdb)  d 1
(gdb) lprintf foo_a,"str=%s\n",str
_LPrintfCommmand arg=foo_a,"str=%s\n",str
_LPrintfCommmand remaining="str=%s\n",str locations=symbol and line for chkfunc.c, line 11
Breakpoint 2 at 0x400518: file chkfunc.c, line 12.
(gdb) run
Starting program: /home/nojima/prog/my-works/gdb-python/test-function/chkfunc 
str=caller is main!
caller is main!
str=caller is bar!
caller is bar!
[Inferior 1 (process 5361) exited normally]

ってな感じで、既存のbreakpointの機能を元に拡張できる。
ただ、この拡張済みbreakpointを利用するには、この拡張済みbreakpointのオブジェクト
経由でbreakpointを仕掛ける必要がある。

※Non stopになるのはご愛嬌。なんでかはわからん。

31. gdbには、info functionsというfunctionのシンボルテーブルをいっぺんに
引き抜く必殺手続きがある。
こちらをpython経由で使ってみた。

(gdb) python str=gdb.execute("info functions",False,True)
(gdb) python print str
All defined functions:

File chkfunc.c:
void caller_bar(void);
void foo_a(const char *);
int main(int, char **);

Non-debugging symbols:
0x00000000004003b8  _init
0x00000000004003e0  puts
0x00000000004003e0  puts@plt
0x00000000004003f0  __libc_start_main
0x00000000004003f0  __libc_start_main@plt
0x0000000000400400  _start
0x000000000040042c  call_gmon_start
0x0000000000400450  deregister_tm_clones
0x0000000000400480  register_tm_clones
0x00000000004004c0  __do_global_dtors_aux
0x00000000004004e0  frame_dummy
0x0000000000400560  __libc_csu_fini
0x0000000000400570  __libc_csu_init
0x00000000004005fc  _fini

ただ、この結果は本フォーマットでparseする必要があるので、
便利かどうかは疑問すぎる。

32. rbreakの実装をおいかけたら、search_symbolsという
　　専用の関数つかってsymbolテーブル洗ってた。
　　このあたりは独自実装っぽくて、唯一他コマンドで利用
　　されているのは、info functionsぐらい。

33. くっそー、rbreakとfinishは帯に短し、たすきに長しだーっ
　　finish--->現在のスタックから出ると無効になる一時的なbreakpoint
             次のスタックとかに移動するといきなり無効になるので、
　　　　　　　コールトレースには不向き。

     とおもたら、

　　　　Step1. breakして、
       Step2. gdb.breakなら、finishしまくり、(このときstack +1)
       Step3. gdb.finishbreakなら、continueしまくり（このときstack -1)
       Step4. finishでエラー発生なら、無視して、continue
             (理由：breakpointが定められんとか...あるので)

     とかよさげ。これでコールトレース取れるか?

34. rbreak & info breakで整形されたアドレスが手に入るので、
　　こちらをparseし、一旦deleteしてから、逐一gdb.breakすれば、
　　実行トレースは手に入りそうだ。
   (でも、相変わらずreturnの場所は手に入らんがな！）

35. コールトレースとる時、plugins.soなんてのは結構悪夢。
　　というのも、ダイナミックリンクライブラリの全シンボルとか入っちゃうので、
　　rbreakは非現実的だったりする...


36. Breakpoint.slient=Trueで、breakしたときにいちいちbreakpoint
   の情報が出るのを抑圧できる。が、breakpointを設定するときにでる
　　メッセージは抑圧できない。

   (breakpointを作成するときにprint=1に設定されるため）

    ---> が、internal=Trueにすると、抑圧出来る。しかしながら、
　　info breakにも出てこなくなるので注意。

------ここからは3/15以降

実は、dynamic lib loading用に、glibcには、
dl-debug.cというdebbuger用のローダーへの通信機構が用意されている。

実際には、$(LIBC-SOURCE)/elf/dl-debug.cにあるとおり、

(gdb) b _dl_debug_state

で、ひっかけ、

(gdb) p _r_debug

をあさりまくればいろいろ手に入る。

strcutureの構造は以下の通り。

(gdb) l
2	#include <sys/types.h>
3	#include <dirent.h>
4	
5	int
6	main (void)
7	{
8	  DIR *dp;
9	  struct dirent *ep;
10	
11	  dp = opendir ("./");
(gdb) l
12	  if (dp != NULL) {
13	      while ((ep = readdir (dp)))
14	        puts (ep->d_name);
15	      (void) closedir (dp);
16	  } else {
17	    perror ("Couldn't open the directory");
18	  }
19	  return 0;
20	}
21	
(gdb) b 12
Breakpoint 1 at 0x400652: file dirtest.c, line 12.
(gdb) run
Starting program: /home/nojima/prog/python-test/ctypes/dirtest 

Breakpoint 1, main () at dirtest.c:12
12	  if (dp != NULL) {
(gdb) p *dp
$1 = {fd = 7, lock = 0, allocation = 32768, size = 0, offset = 0, filepos = 0, 
  data = 0x601038 ""}
(gdb) info dp
Undefined info command: "dp".  Try "help info".
(gdb) whatis dp
type = DIR *
(gdb) ptype dp
type = struct __dirstream {
    int fd;
    __libc_lock_t lock;
    size_t allocation;
    size_t size;
    size_t offset;
    off_t filepos;
    char data[];
} *

という感じで手に入る。

